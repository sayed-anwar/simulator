<!DOCTYPE html>
<html style="height: 100%;" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<title>ld(1): GNU linker - Linux man page</title>
<!-- base href="https://linux.die.net/man/1/ld" -->
<link rel="canonical" href="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/ld_004.htm">
<link rel="stylesheet" type="text/css" href="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/white.css">
<link rel="shortcut icon" href="https://linux.die.net/favicon.ico" type="image/x-icon">
<link href="https://linux.die.net/style/search.xml" rel="search" title="Search the die.net site" type="application/opensearchdescription+xml">
<meta name="viewport" content="width=device-width,initial-scale=1">
<meta name="description" content="ld combines a number of object and archive files, relocates their data and ties up symbol references. Usually the last step in compiling a program is to run ld.">
<script src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_002.txt"></script><script src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f.txt" id="google_shimpl"></script><script type="text/javascript" async="" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/ga.js"></script><script type="text/javascript">
<!--
var _gaq = _gaq || [];_gaq.push(['_setAccount', 'UA-50820-6']);_gaq.push(['_trackPageview']);
window.google_analytics_uacct = 'UA-50820-6';
// -->
</script>
<link type="text/css" rel="stylesheet" charset="UTF-8" href="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/translateelement.css"><script type="text/javascript" charset="UTF-8" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/m=el_main"></script><meta http-equiv="origin-trial" content="AzoawhTRDevLR66Y6MROu167EDncFPBvcKOaQispTo9ouEt5LvcBjnRFqiAByRT+2cDHG1Yj4dXwpLeIhc98/gIAAACFeyJvcmlnaW4iOiJodHRwczovL2RvdWJsZWNsaWNrLm5ldDo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjYxMjk5MTk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A6+nc62kbJgC46ypOwRsNW6RkDn2x7tgRh0wp7jb3DtFF7oEhu1hhm4rdZHZ6zXvnKZLlYcBlQUImC4d3kKihAcAAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXN5bmRpY2F0aW9uLmNvbTo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjYxMjk5MTk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A/9La288e7MDEU2ifusFnMg1C2Ij6uoa/Z/ylwJIXSsWfK37oESIPbxbt4IU86OGqDEPnNVruUiMjfKo65H/CQwAAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXRhZ3NlcnZpY2VzLmNvbTo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjYxMjk5MTk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="AzoawhTRDevLR66Y6MROu167EDncFPBvcKOaQispTo9ouEt5LvcBjnRFqiAByRT+2cDHG1Yj4dXwpLeIhc98/gIAAACFeyJvcmlnaW4iOiJodHRwczovL2RvdWJsZWNsaWNrLm5ldDo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjYxMjk5MTk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A6+nc62kbJgC46ypOwRsNW6RkDn2x7tgRh0wp7jb3DtFF7oEhu1hhm4rdZHZ6zXvnKZLlYcBlQUImC4d3kKihAcAAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXN5bmRpY2F0aW9uLmNvbTo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjYxMjk5MTk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A/9La288e7MDEU2ifusFnMg1C2Ij6uoa/Z/ylwJIXSsWfK37oESIPbxbt4IU86OGqDEPnNVruUiMjfKo65H/CQwAAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXRhZ3NlcnZpY2VzLmNvbTo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjYxMjk5MTk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><style>.goog-te-ftab-float {z-index:9999999; overflow:visible; position:fixed; _position:absolute;top:0px; _top:expression((0+(hack1=document.documentElement.scrollTop||document.body.scrollTop))+'px');left:auto;bottom:auto;right:20px; _left:expression((-20-document.getElementById('\3a 0.floatContainer').offsetWidth+(hack5=document.documentElement.clientWidth||document.body.clientWidth)+(hack6=document.documentElement.scrollLeft||document.body.scrollLeft))+'px');}</style><link rel="preload" href="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_003.txt" as="script"><script type="text/javascript" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_003.txt"></script><link rel="preload" href="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_004.txt" as="script"><script type="text/javascript" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_004.txt"></script><link rel="preload" href="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_003.txt" as="script"><script type="text/javascript" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_003.txt"></script><link rel="preload" href="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_004.txt" as="script"><script type="text/javascript" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_004.txt"></script></head>

<body style="position: relative; min-height: 100%; top: 40px;"><div style="" class="skiptranslate"><iframe id=":1.container" class="goog-te-banner-frame skiptranslate" src="javascript:''" style="visibility:visible" frameborder="0"></iframe></div>
<div id="bg">
<div id="logo">
<a href="https://www.die.net/"><img src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/logo.svg" alt="die.net" onerror="this.onerror=null; this.src='/style/logo.png'" width="120" height="120"></a>
</div>
<div id="content">

<!-- google_ad_section_start -->
<h1>ld(1) - Linux man page</h1>

<h2>Name</h2>

<p>ld - The GNU linker
</p><h2>Synopsis</h2>

<p>ld [<b>options</b>] <i>objfile</i> ...
</p><h2>Description</h2>
<div id="adright">
<script async="" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_005.txt"></script>
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-5823754184406795" data-ad-slot="7130739364" data-adsbygoogle-status="done" data-ad-status="filled"><ins id="aswift_0_expand" style="border: medium none; height: 280px; width: 336px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-table;" tabindex="0" title="Advertisement" aria-label="Advertisement"><ins id="aswift_0_anchor" style="border: medium none; height: 280px; width: 336px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: block;"><iframe id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;border:0;width:336px;height:280px;" sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/ads.htm" data-google-container-id="a!1" data-google-query-id="CLSXpuex-PgCFQXf7QodDo0OlA" data-load-complete="true" width="336" height="280" frameborder="0"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>


<p><b>ld</b> combines a number of object and archive files, relocates 
their data and ties up symbol references. Usually the last step in 
compiling a program is
to run <b>ld</b>.
</p><p><b>ld</b> accepts Linker Command Language files written in a superset of <small>AT&amp;T</small> 's Link Editor Command Language syntax, to provide explicit
and total control over the linking process.
</p><p>This man page does not describe the command language; see the <b>ld</b> entry in <tt>"info"</tt> for full details on the command language and on other
aspects of the <small>GNU</small> linker.
</p><p>This version of <b>ld</b> uses the general purpose <small>BFD</small> libraries to operate on object files. This allows <b>ld</b> to read, combine, and
write object files in many different formats---for example, <small>COFF</small> or <tt>"a.out"</tt>. Different formats may be linked together to produce any
available kind of object file.
</p><p>Aside from its flexibility, the <small>GNU</small> linker is more helpful than other linkers in providing diagnostic information. Many linkers abandon
execution immediately upon encountering an error; whenever possible, <b>ld</b> continues executing, allowing you to identify other errors (or, in some cases,
to get an output file in spite of the error).
</p><p>The <small>GNU</small> linker <b>ld</b> is meant to cover a broad range of situations, and to be as compatible as possible with other linkers. As a result,
you have many choices to control its behavior.
</p><h2>Options</h2>

<p>The linker supports a plethora of command-line options, but in actual
 practice few of them are used in any particular context. For instance, a
 frequent use
of <b>ld</b> is to link standard Unix object files on a standard, supported Unix system. On such a system, to link a file <tt>"hello.o"</tt>:

</p><pre class="code">ld -o &lt;output&gt; /lib/crt0.o hello.o -lc</pre>This tells <b>ld</b> to produce a file called <i>output</i> as the result of linking the file <tt>"/lib/crt0.o"</tt> with <tt>"hello.o"</tt> and the library
<tt>"libc.a"</tt>, which will come from the standard search directories. (See the discussion of the <b>-l</b> option below.)
<p>Some of the command-line options to <b>ld</b> may be specified at any point in the command line. However, options which refer to files, such as <b>-l</b> or
<b>-T</b>, cause the file to be read at the point at which the option 
appears in the command line, relative to the object files and other file
 options.
Repeating non-file options with a different argument will either have no
 further effect, or override prior occurrences (those further to the 
left on the
command line) of that option. Options which may be meaningfully 
specified more than once are noted in the descriptions below.
</p><p>Non-option arguments are object files or archives which are to be
 linked together. They may follow, precede, or be mixed in with 
command-line options,
except that an object file argument may not be placed between an option 
and its argument.
</p><p>Usually the linker is invoked with at least one object file, but you can specify other forms of binary input files using <b>-l</b>, <b>-R</b>, and the
script command language. If <i>no</i> binary input files at all are specified, the linker does not produce any output, and issues the message <b>No input
files</b>.
</p><p>If the linker cannot recognize the format of an object file, it 
will assume that it is a linker script. A script specified in this way 
augments the main
linker script used for the link (either the default linker script or the
 one specified by using <b>-T</b>). This feature permits the linker to link against a
file which appears to be an object or an archive, but actually merely defines some symbol values, or uses <tt>"INPUT"</tt> or <tt>"GROUP"</tt>
 to load other
objects. Specifying a script in this way merely augments the main linker
 script, with the extra commands placed after the main script; use the <b>-T</b> option
to replace the default linker script entirely, but note the effect of the <tt>"INSERT"</tt> command.
</p><p>For options whose names are a single letter, option arguments 
must either follow the option letter without intervening whitespace, or 
be given as separate
arguments immediately following the option that requires them.
</p><p>For options whose names are multiple letters, either one dash or two can precede the option name; for example, <b>-trace-symbol</b> and
<b>--trace-symbol</b> are equivalent. Note---there is one exception to 
this rule. Multiple letter options that start with a lower case 'o' can 
only be preceded
by two dashes. This is to reduce confusion with the <b>-o</b> option. So for example <b>-omagic</b> sets the output file name to <b>magic</b> whereas
<b>--omagic</b> sets the <small>NMAGIC</small> flag on the output.
</p><p>Arguments to multiple-letter options must either be separated 
from the option name by an equals sign, or be given as separate 
arguments immediately
following the option that requires them. For example, <b>--trace-symbol foo</b> and <b>--trace-symbol=foo</b> are equivalent. Unique abbreviations of the names
of multiple-letter options are accepted.
</p><p>Note---if the linker is being invoked indirectly, via a compiler driver (e.g. <b>gcc</b>) then all the linker command line options should be prefixed by
<b>-Wl,</b> (or whatever is appropriate for the particular compiler driver) like this:
</p><pre class="code">gcc -Wl,--start-group foo.o bar.o -Wl,--end-group</pre>This
 is important, because otherwise the compiler driver program may 
silently drop the linker options, resulting in a bad link. Confusion may
 also arise
when passing options that require values through a driver, as the use of
 a space between option and argument acts as a separator, and causes the
 driver to pass
only the option to the linker and the argument to the compiler. In this 
case, it is simplest to use the joined forms of both single- and 
multiple-letter
options, such as:
<pre class="code">gcc foo.o bar.o -Wl,-eENTRY -Wl,-Map=a.map</pre>Here is a table of the generic command line switches accepted by the <small>GNU</small> linker:
<dl compact="compact">
<dt><b>@</b><i>file</i>
</dt><dd>Read command-line options from <i>file</i>. The options read are inserted in place of the original @<i>file</i> option. If <i>file</i> does not exist, or
cannot be read, then the option will be treated literally, and not removed.
<p>Options in <i>file</i> are separated by whitespace. A whitespace 
character may be included in an option by surrounding the entire option 
in either single or
double quotes. Any character (including a backslash) may be included by 
prefixing the character to be included with a backslash. The <i>file</i> may itself
contain additional @<i>file</i> options; any such options will be processed recursively.
</p></dd><dt><b>-a</b> <i>keyword</i>
</dt><dd>This option is supported for <small>HP/UX</small> compatibility. The <i>keyword</i> argument must be one of the strings <b>archive</b>, <b>shared</b>, or
<b>default</b>. <b>-aarchive</b> is functionally equivalent to <b>-Bstatic</b>, and the other two keywords are functionally equivalent to <b>-Bdynamic</b>.
This option may be used any number of times.
</dd><dt><b>--audit</b> <i><small>AUDITLIB</small></i>
</dt><dd>Adds <i><small>AUDITLIB</small></i> to the <tt>"DT_AUDIT"</tt> entry of the dynamic section. <i><small>AUDITLIB</small></i> is not checked for existence,
nor will it use the <small>DT_SONAME</small> specified in the library. If specified multiple times <tt>"DT_AUDIT"</tt>
 will contain a colon separated list of
audit interfaces to use. If the linker finds an object with an audit 
entry while searching for shared libraries, it will add a corresponding
<tt>"DT_DEPAUDIT"</tt> entry in the output file. This option is only meaningful on <small>ELF</small> platforms supporting the rtld-audit interface.
</dd><dt><b>-A</b> <i>architecture</i>
</dt><dt><b>--architecture=</b><i>architecture</i>
</dt><dd>In the current release of <b>ld</b>, this option is useful only for the Intel 960 family of architectures. In that <b>ld</b> configuration, the
<i>architecture</i> argument identifies the particular architecture in 
the 960 family, enabling some safeguards and modifying the 
archive-library search path.

<p>Future releases of <b>ld</b> may support similar functionality for other architecture families.
</p></dd><dt><b>-b</b> <i>input-format</i>
</dt><dt><b>--format=</b><i>input-format</i>
</dt><dd><b>ld</b> may be configured to support more than one kind of object file. If your <b>ld</b> is configured this way, you can use the <b>-b</b> option to
specify the binary format for input object files that follow this option on the command line. Even when <b>ld</b> is configured to support alternative object
formats, you don't usually need to specify this, as <b>ld</b> should be configured to expect as a default input format the most usual format on each machine.
<i>input-format</i> is a text string, the name of a particular format supported by the <small>BFD</small> libraries. (You can list the available binary formats
with <b>objdump -i</b>.)
<p>You may want to use this option if you are linking files with an unusual binary format. You can also use <b>-b</b> to switch formats explicitly (when
linking object files of different formats), by including <b>-b</b> <i>input-format</i> before each group of object files in a particular format.

</p><p>The default format is taken from the environment variable <tt>"GNUTARGET"</tt>.
</p><p>You can also define the input format from a script, using the command <tt>"TARGET"</tt>;
</p></dd><dt><b>-c</b> <i>MRI-commandfile</i>
</dt><dt><b>--mri-script=</b><i>MRI-commandfile</i>
</dt><dd>For compatibility with linkers produced by <small>MRI</small> , <b>ld</b> accepts script files written in an alternate, restricted command language,
described in the <small>MRI</small> Compatible Script Files section of <small>GNU</small> ld documentation. Introduce <small>MRI</small> script files with the
option <b>-c</b>; use the <b>-T</b> option to run linker scripts written in the general-purpose <b>ld</b> scripting language. If <i>MRI-cmdfile</i> does not
exist, <b>ld</b> looks for it in the directories specified by any <b>-L</b> options.
</dd><dt><b>-d</b>

<p><b>-dc</b>

</p><p><b>-dp</b>

</p><p>These three options are equivalent; multiple forms are supported 
for compatibility with other linkers. They assign space to common 
symbols even if a
relocatable output file is specified (with <b>-r</b>). The script command <tt>"FORCE_COMMON_ALLOCATION"</tt> has the same effect.
</p></dt><dt><b>--depaudit</b> <i><small>AUDITLIB</small></i>
</dt><dt><b>-P</b> <i><small>AUDITLIB</small></i>
</dt><dd>Adds <i><small>AUDITLIB</small></i> to the <tt>"DT_DEPAUDIT"</tt> entry of the dynamic section. <i><small>AUDITLIB</small></i> is not checked for existence,
nor will it use the <small>DT_SONAME</small> specified in the library. If specified multiple times <tt>"DT_DEPAUDIT"</tt> will contain a colon separated list
of audit interfaces to use. This option is only meaningful on <small>ELF</small> platforms supporting the rtld-audit interface. The -P option is provided for
Solaris compatibility.
</dd><dt><b>-e</b> <i>entry</i>
</dt><dt><b>--entry=</b><i>entry</i>
</dt><dd>Use <i>entry</i> as the explicit symbol for beginning execution
 of your program, rather than the default entry point. If there is no 
symbol named
<i>entry</i>, the linker will try to parse <i>entry</i> as a number, and use that as the entry address (the number will be interpreted in base 10; you may use
a leading <b>0x</b> for base 16, or a leading <b>0</b> for base 8).
</dd><dt><b>--exclude-libs</b> <i>lib</i><b>,</b><i>lib</i><b>,...</b>
</dt><dd>Specifies a list of archive libraries from which symbols should
 not be automatically exported. The library names may be delimited by 
commas or colons.
Specifying <tt>"--exclude-libs ALL"</tt> excludes symbols in all archive libraries from automatic export. This option is available only for the i386
<small>PE</small> targeted port of the linker and for <small>ELF</small> targeted ports. For i386 <small>PE</small> , symbols explicitly listed in a .def file
are still exported, regardless of this option. For <small>ELF</small> targeted ports, symbols affected by this option will be treated as hidden.
</dd><dt><b>--exclude-modules-for-implib</b> <i>module</i><b>,</b><i>module</i><b>,...</b>
</dt><dd>Specifies a list of object files or archive members, from which
 symbols should not be automatically exported, but which should be 
copied wholesale into the
import library being generated during the link. The module names may be 
delimited by commas or colons, and must match exactly the filenames used
 by <b>ld</b>
to open the files; for archive members, this is simply the member name, 
but for object files the name listed must include and match precisely 
any path used to
specify the input file on the linker's command-line. This option is 
available only for the i386 <small>PE</small> targeted port of the linker. Symbols
explicitly listed in a .def file are still exported, regardless of this option.
</dd><dt><b>-E</b>
</dt><dt><b>--export-dynamic</b>
</dt><dt><b>--no-export-dynamic</b>
</dt><dd>When creating a dynamically linked executable, using the <b>-E</b> option or the <b>--export-dynamic</b> option causes the linker to add all symbols to the
dynamic symbol table. The dynamic symbol table is the set of symbols which are visible from dynamic objects at run time.
<p>If you do not use either of these options (or use the <b>--no-export-dynamic</b> option to restore the default behavior), the dynamic symbol table will
normally contain only those symbols which are referenced by some dynamic object mentioned in the link.
</p><p>If you use <tt>"dlopen"</tt> to load a dynamic object which needs to refer back to the symbols defined by the program, rather than some other dynamic
object, then you will probably need to use this option when linking the program itself.
</p><p>You can also use the dynamic list to control what symbols should 
be added to the dynamic symbol table if the output format supports it. 
See the description
of <b>--dynamic-list</b>.
</p><p>Note that this option is specific to <small>ELF</small> targeted ports. <small>PE</small> targets support a similar function to export all symbols from a
<small>DLL</small> or <small>EXE</small> ; see the description of <b>--export-all-symbols</b> below.
</p></dd><dt><b>-EB</b>

<p>Link big-endian objects. This affects the default output format.

</p><p><b>-EL</b>

</p><p>Link little-endian objects. This affects the default output format.
</p></dt><dt><b>-f</b> <i>name</i>
</dt><dt><b>--auxiliary=</b><i>name</i>
</dt><dd>When creating an <small>ELF</small> shared object, set the internal <small>DT_AUXILIARY</small> field to the specified name. This tells the dynamic linker
that the symbol table of the shared object should be used as an auxiliary filter on the symbol table of the shared object <i>name</i>.
<p>If you later link a program against this filter object, then, when you run the program, the dynamic linker will see the <small>DT_AUXILIARY</small>
 field.
If the dynamic linker resolves any symbols from the filter object, it 
will first check whether there is a definition in the shared object <i>name</i>. If there
is one, it will be used instead of the definition in the filter object. The shared object <i>name</i> need not exist. Thus the shared object <i>name</i> may be
used to provide an alternative implementation of certain functions, perhaps for debugging or for machine specific performance.
</p><p>This option may be specified more than once. The <small>DT_AUXILIARY</small> entries will be created in the order in which they appear on the command
line.
</p></dd><dt><b>-F</b> <i>name</i>
</dt><dt><b>--filter=</b><i>name</i>
</dt><dd>When creating an <small>ELF</small> shared object, set the internal <small>DT_FILTER</small>
 field to the specified name. This tells the dynamic linker that
the symbol table of the shared object which is being created should be 
used as a filter on the symbol table of the shared object <i>name</i>.

<p>If you later link a program against this filter object, then, when you run the program, the dynamic linker will see the <small>DT_FILTER</small>
 field. The
dynamic linker will resolve symbols according to the symbol table of the
 filter object as usual, but it will actually link to the definitions 
found in the
shared object <i>name</i>. Thus the filter object can be used to select a subset of the symbols provided by the object <i>name</i>.
</p><p>Some older linkers used the <b>-F</b> option throughout a compilation toolchain for specifying object-file format for both input and output object files.
The <small>GNU</small> linker uses other mechanisms for this purpose: the <b>-b</b>, <b>--format</b>, <b>--oformat</b> options, the <tt>"TARGET"</tt> command
in linker scripts, and the <tt>"GNUTARGET"</tt> environment variable. The <small>GNU</small> linker will ignore the <b>-F</b> option when not creating an
<small>ELF</small> shared object.
</p></dd><dt><b>-fini=</b><i>name</i>
</dt><dd>When creating an <small>ELF</small> executable or shared object, call <small>NAME</small> when the executable or shared object is unloaded, by setting
<small>DT_FINI</small> to the address of the function. By default, the linker uses <tt>"_fini"</tt> as the function to call.
</dd><dt><b>-g</b>

<p>Ignored. Provided for compatibility with other tools.
</p></dt><dt><b>-G</b> <i>value</i>
</dt><dt><b>--gpsize=</b><i>value</i>
</dt><dd>Set the maximum size of objects to be optimized using the <small>GP</small> register to <i>size</i>. This is only meaningful for object file formats such as
<small>MIPS ECOFF</small> which supports putting large and small objects into different sections. This is ignored for other object file formats.
</dd><dt><b>-h</b> <i>name</i>
</dt><dt><b>-soname=</b><i>name</i>
</dt><dd>When creating an <small>ELF</small> shared object, set the internal <small>DT_SONAME</small> field to the specified name. When an executable is linked with
a shared object which has a <small>DT_SONAME</small> field, then when the executable is run the dynamic linker will attempt to load the shared object specified
by the <small>DT_SONAME</small> field rather than the using the file name given to the linker.
</dd><dt><b>-i</b>

<p>Perform an incremental link (same as option <b>-r</b>).
</p></dt><dt><b>-init=</b><i>name</i>
</dt><dd>When creating an <small>ELF</small> executable or shared object, call <small>NAME</small> when the executable or shared object is loaded, by setting
<small>DT_INIT</small> to the address of the function. By default, the linker uses <tt>"_init"</tt> as the function to call.
</dd><dt><b>-l</b> <i>namespec</i>
</dt><dt><b>--library=</b><i>namespec</i>
</dt><dd>Add the archive or object file specified by <i>namespec</i> to the list of files to link. This option may be used any number of times. If <i>namespec</i> is
of the form <i>:filename</i>, <b>ld</b> will search the library path for a file called <i>filename</i>, otherwise it will search the library path for a file
called <i>libnamespec.a</i>.
<p>On systems which support shared libraries, <b>ld</b> may also search for files other than <i>libnamespec.a</i>. Specifically, on <small>ELF</small> and
SunOS systems, <b>ld</b> will search a directory for a library called <i>libnamespec.so</i> before searching for one called <i>libnamespec.a</i>. (By
convention, a <tt>".so"</tt> extension indicates a shared library.) Note that this behavior does not apply to <i>:filename</i>, which always specifies a file
called <i>filename</i>.
</p><p>The linker will search an archive only once, at the location 
where it is specified on the command line. If the archive defines a 
symbol which was undefined
in some object which appeared before the archive on the command line, 
the linker will include the appropriate <b>file</b>(s) from the archive. However, an undefined
symbol in an object appearing later on the command line will not cause the linker to search the archive again.
</p><p>See the <b>-(</b> option for a way to force the linker to search archives multiple times.
</p><p>You may list the same archive multiple times on the command line.
</p><p>This type of archive searching is standard for Unix linkers. However, if you are using <b>ld</b> on <small>AIX</small> , note that it is different from the
behaviour of the <small>AIX</small> linker.
</p></dd><dt><b>-L</b> <i>searchdir</i>
</dt><dt><b>--library-path=</b><i>searchdir</i>
</dt><dd>Add path <i>searchdir</i> to the list of paths that <b>ld</b> will search for archive libraries and <b>ld</b>
 control scripts. You may use this option any
number of times. The directories are searched in the order in which they
 are specified on the command line. Directories specified on the command
 line are
searched before the default directories. All <b>-L</b> options apply to all <b>-l</b> options, regardless of the order in which the options appear. <b>-L</b>
options do not affect how <b>ld</b> searches for a linker script unless <b>-T</b> option is specified.
<p>If <i>searchdir</i> begins with <tt>"="</tt>, then the <tt>"="</tt> will be replaced by the <i>sysroot prefix</i>, a path specified when the linker is
configured.
</p><p>The default set of paths searched (without being specified with <b>-L</b>) depends on which emulation mode <b>ld</b> is using, and in some cases also on how
it was configured.
</p><p>The paths can also be specified in a link script with the <tt>"SEARCH_DIR"</tt> command. Directories specified this way are searched at the point in which
the linker script appears in the command line.
</p></dd><dt><b>-m</b> <i>emulation</i>
</dt><dd>Emulate the <i>emulation</i> linker. You can list the available emulations with the <b>--verbose</b> or <b>-V</b> options.
<p>If the <b>-m</b> option is not used, the emulation is taken from the <tt>"LDEMULATION"</tt> environment variable, if that is defined.
</p><p>Otherwise, the default emulation depends upon how the linker was configured.
</p></dd><dt><b>-M</b>
</dt><dt><b>--print-map</b>
</dt><dd>Print a link map to the standard output. A link map provides information about the link, including the following:
</dd><dd>• Where object files are mapped into memory.

<p>• How common symbols are allocated.

</p><p>• All archive members included in the link, with a mention of the symbol which caused the archive member to be brought in.

</p><p>• The values assigned to symbols.
</p></dd><dd>Note - symbols whose values are computed by an expression 
which involves a reference to a previous value of the same symbol may 
not have correct result
displayed in the link map. This is because the linker discards 
intermediate results and only retains the final value of an expression. 
Under such circumstances
the linker will display the final value enclosed by square brackets. 
Thus for example a linker script containing:
</dd><dd>

<pre class="code">foo = 1
foo = foo * 4
foo = foo + 8</pre>will produce the following output in the link map if the <b>-M</b> option is used:
<pre class="code">0x00000001                foo = 0x1
[0x0000000c]                foo = (foo * 0x4)
[0x0000000c]                foo = (foo + 0x8)</pre>See <b>Expressions</b> for more information about expressions in linker scripts.
</dd><dt><b>-n</b>
</dt><dt><b>--nmagic</b>
</dt><dd>Turn off page alignment of sections, and mark the output as <tt>"NMAGIC"</tt> if possible.
</dd><dt><b>-N</b>
</dt><dt><b>--omagic</b>
</dt><dd>Set the text and data sections to be readable and writable. 
Also, do not page-align the data segment, and disable linking against 
shared libraries. If the
output format supports Unix style magic numbers, mark the output as <tt>"OMAGIC"</tt>. Note: Although a writable text section is allowed for PE-COFF targets,
it does not conform to the format specification published by Microsoft.
</dd><dt><b>--no-omagic</b>
</dt><dd>This option negates most of the effects of the <b>-N</b> option. It sets the text section to be read-only, and forces the data segment to be page-aligned.
Note - this option does not enable linking against shared libraries. Use <b>-Bdynamic</b> for this.
</dd><dt><b>-o</b> <i>output</i>
</dt><dt><b>--output=</b><i>output</i>
</dt><dd>Use <i>output</i> as the name for the program produced by <b>ld</b>; if this option is not specified, the name <i>a.out</i> is used by default. The script
command <tt>"OUTPUT"</tt> can also specify the output file name.
</dd><dt><b>-O</b> <i>level</i>
</dt><dd>If <i>level</i> is a numeric values greater than zero <b>ld</b> optimizes the output. This might take significantly longer and therefore probably should
only be enabled for the final binary. At the moment this option only affects <small>ELF</small>
 shared library generation. Future releases of the linker may
make more use of this option. Also currently there is no difference in 
the linker's behaviour for different non-zero values of this option. 
Again this may
change with future releases.
</dd><dt><b>-q</b>
</dt><dt><b>--emit-relocs</b>
</dt><dd>Leave relocation sections and contents in fully linked 
executables. Post link analysis and optimization tools may need this 
information in order to perform
correct modifications of executables. This results in larger 
executables.
<p>This option is currently only supported on <small>ELF</small> platforms.
</p></dd><dt><b>--force-dynamic</b>
</dt><dd>Force the output file to have dynamic sections. This option is specific to VxWorks targets.
</dd><dt><b>-r</b>
</dt><dt><b>--relocatable</b>
</dt><dd>Generate relocatable output---i.e., generate an output file that can in turn serve as input to <b>ld</b>. This is often called <i>partial linking</i>. As a
side effect, in environments that support standard Unix magic numbers, this option also sets the output file's magic number to <tt>"OMAGIC"</tt>. If this
option is not specified, an absolute file is produced. When linking C <small>++</small> programs, this option <i>will not</i> resolve references to
constructors; to do that, use <b>-Ur</b>.
<p>When an input file does not have the same format as the output file, 
partial linking is only supported if that input file does not contain 
any relocations.
Different output formats can have further restrictions; for example some
 <tt>"a.out"</tt>-based formats do not support partial linking with input files in
other formats at all.
</p><p>This option does the same thing as <b>-i</b>.
</p></dd><dt><b>-R</b> <i>filename</i>
</dt><dt><b>--just-symbols=</b><i>filename</i>
</dt><dd>Read symbol names and their addresses from <i>filename</i>, but do not relocate it or include it in the output. This allows your output file to refer
symbolically to absolute locations of memory defined in other programs. You may use this option more than once.
<p>For compatibility with other <small>ELF</small> linkers, if the <b>-R</b> option is followed by a directory name, rather than a file name, it is treated as
the <b>-rpath</b> option.
</p></dd><dt><b>-s</b>
</dt><dt><b>--strip-all</b>
</dt><dd>Omit all symbol information from the output file.
</dd><dt><b>-S</b>
</dt><dt><b>--strip-debug</b>
</dt><dd>Omit debugger symbol information (but not all symbols) from the output file.
</dd><dt><b>-t</b>
</dt><dt><b>--trace</b>
</dt><dd>Print the names of the input files as <b>ld</b> processes them.
</dd><dt><b>-T</b> <i>scriptfile</i>
</dt><dt><b>--script=</b><i>scriptfile</i>
</dt><dd>Use <i>scriptfile</i> as the linker script. This script replaces <b>ld</b>'s default linker script (rather than adding to it), so <i>commandfile</i> must
specify everything necessary to describe the output file. If <i>scriptfile</i> does not exist in the current directory, <tt>"ld"</tt> looks for it in the
directories specified by any preceding <b>-L</b> options. Multiple <b>-T</b> options accumulate.
</dd><dt><b>-dT</b> <i>scriptfile</i>
</dt><dt><b>--default-script=</b><i>scriptfile</i>
</dt><dd>Use <i>scriptfile</i> as the default linker script.
<p>This option is similar to the <b>--script</b> option except that processing of the script is delayed until after the rest of the command line has been
processed. This allows options placed after the <b>--default-script</b> 
option on the command line to affect the behaviour of the linker script,
 which can be
important when the linker command line cannot be directly controlled by 
the user. (eg because the command line is being constructed by another 
tool, such as
<b>gcc</b>).
</p></dd><dt><b>-u</b> <i>symbol</i>
</dt><dt><b>--undefined=</b><i>symbol</i>
</dt><dd>Force <i>symbol</i> to be entered in the output file as an 
undefined symbol. Doing this may, for example, trigger linking of 
additional modules from
standard libraries. <b>-u</b> may be repeated with different option arguments to enter additional undefined symbols. This option is equivalent to the
<tt>"EXTERN"</tt> linker script command.
</dd><dt><b>-Ur</b>

<p>For anything other than C <small>++</small> programs, this option is equivalent to <b>-r</b>: it generates relocatable output---i.e., an output file that
can in turn serve as input to <b>ld</b>. When linking C <small>++</small> programs, <b>-Ur</b> <i>does</i> resolve references to constructors, unlike
<b>-r</b>. It does not work to use <b>-Ur</b> on files that were themselves linked with <b>-Ur</b>; once the constructor table has been built, it cannot be
added to. Use <b>-Ur</b> only for the last partial link, and <b>-r</b> for the others.
</p></dt><dt><b>--unique[=</b> <i><small>SECTION</small></i> <b>]</b>
</dt><dd>Creates a separate output section for every input section matching <i><small>SECTION</small></i> , or if the optional wildcard <i><small>SECTION</small></i>
argument is missing, for every orphan input section. An orphan section 
is one not specifically mentioned in a linker script. You may use this 
option multiple
times on the command line; It prevents the normal merging of input 
sections with the same name, overriding output section assignments in a 
linker
script.
</dd><dt><b>-v</b>
</dt><dt><b>--version</b>
</dt><dt><b>-V</b>

<p>Display the version number for <b>ld</b>. The <b>-V</b> option also lists the supported emulations.

</p><p><b>-x</b>
</p></dt><dt><b>--discard-all</b>
</dt><dd>Delete all local symbols.
</dd><dt><b>-X</b>
</dt><dt><b>--discard-locals</b>
</dt><dd>Delete all temporary local symbols. (These symbols start with system-specific local label prefixes, typically <b>.L</b> for <small>ELF</small> systems or
<b>L</b> for traditional a.out systems.)
</dd><dt><b>-y</b> <i>symbol</i>
</dt><dt><b>--trace-symbol=</b><i>symbol</i>
</dt><dd>Print the name of each linked file in which <i>symbol</i> appears. This option may be given any number of times. On many systems it is necessary to prepend
an underscore.
<p>This option is useful when you have an undefined symbol in your link but don't know where the reference is coming from.
</p></dd><dt><b>-Y</b> <i>path</i>
</dt><dd>Add <i>path</i> to the default library search path. This option exists for Solaris compatibility.
</dd><dt><b>-z</b> <i>keyword</i>
</dt><dd>The recognized keywords are:
</dd><dd><b>combreloc</b>
</dd><dd>Combines multiple reloc sections and sorts them to make dynamic symbol lookup caching possible.
</dd><dd><b>defs</b>
</dd><dd>Disallows undefined symbols in object files. Undefined symbols in shared libraries are still allowed.
</dd><dd><b>execstack</b>
</dd><dd>Marks the object as requiring executable stack.
</dd><dd><b>initfirst</b>
</dd><dd>This option is only meaningful when building a shared object. 
It marks the object so that its runtime initialization will occur before
 the runtime
initialization of any other objects brought into the process at the same
 time. Similarly the runtime finalization of the object will occur after
 the runtime
finalization of any other objects.
</dd><dd><b>interpose</b>
</dd><dd>Marks the object that its symbol table interposes before all symbols but the primary executable.
</dd><dd><b>lazy</b>
</dd><dd>When generating an executable or shared library, mark it to 
tell the dynamic linker to defer function call resolution to the point 
when the function is
called (lazy binding), rather than at load time. Lazy binding is the 
default.
</dd><dd><b>loadfltr</b>
</dd><dd>Marks the object that its filters be processed immediately at runtime.
</dd><dd><b>muldefs</b>
</dd><dd>Allows multiple definitions.
</dd><dd><b>nocombreloc</b>
</dd><dd>Disables multiple reloc sections combining.
</dd><dd><b>nocopyreloc</b>
</dd><dd>Disables production of copy relocs.
</dd><dd><b>nodefaultlib</b>
</dd><dd>Marks the object that the search for dependencies of this object will ignore any default library search paths.
</dd><dd><b>nodelete</b>
</dd><dd>Marks the object shouldn't be unloaded at runtime.
</dd><dd><b>nodlopen</b>
</dd><dd>Marks the object not available to <tt>"dlopen"</tt>.
</dd><dd><b>nodump</b>
</dd><dd>Marks the object can not be dumped by <tt>"dldump"</tt>.
</dd><dd><b>noexecstack</b>
</dd><dd>Marks the object as not requiring executable stack.
</dd><dd><b>norelro</b>
</dd><dd>Don't create an <small>ELF</small> <tt>"PT_GNU_RELRO"</tt> segment header in the object.
</dd><dd><b>now</b>

<p>When generating an executable or shared library, mark it to tell the 
dynamic linker to resolve all symbols when the program is started, or 
when the shared
library is linked to using dlopen, instead of deferring function call 
resolution to the point when the function is first called.
</p></dd><dd><b>origin</b>
</dd><dd>Marks the object may contain <tt>$ORIGIN</tt>.
</dd><dd><b>relro</b>
</dd><dd>Create an <small>ELF</small> <tt>"PT_GNU_RELRO"</tt> segment header in the object.
</dd><dd><b>max-page-size=</b><i>value</i>
</dd><dd>Set the emulation maximum page size to <i>value</i>.
</dd><dd><b>common-page-size=</b><i>value</i>
</dd><dd>Set the emulation common page size to <i>value</i>.
</dd><dd>Other keywords are ignored for Solaris compatibility.
</dd><dt><b>-(</b> <i>archives</i> <b>-)</b>
</dt><dt><b>--start-group</b> <i>archives</i> <b>--end-group</b>
</dt><dd>The <i>archives</i> should be a list of archive files. They may be either explicit file names, or <b>-l</b> options.
<p>The specified archives are searched repeatedly until no new undefined
 references are created. Normally, an archive is searched only once in 
the order that
it is specified on the command line. If a symbol in that archive is 
needed to resolve an undefined symbol referred to by an object in an 
archive that appears
later on the command line, the linker would not be able to resolve that 
reference. By grouping the archives, they all be searched repeatedly 
until all possible
references are resolved.
</p><p>Using this option has a significant performance cost. It is best 
to use it only when there are unavoidable circular references between 
two or more
archives.
</p></dd><dt><b>--accept-unknown-input-arch</b>
</dt><dt><b>--no-accept-unknown-input-arch</b>
</dt><dd>Tells the linker to accept input files whose architecture 
cannot be recognised. The assumption is that the user knows what they 
are doing and deliberately
wants to link in these unknown input files. This was the default 
behaviour of the linker, before release 2.14. The default behaviour from
 release 2.14 onwards
is to reject such input files, and so the <b>--accept-unknown-input-arch</b> option has been added to restore the old behaviour.
</dd><dt><b>--as-needed</b>
</dt><dt><b>--no-as-needed</b>
</dt><dd>This option affects <small>ELF DT_NEEDED</small> tags for dynamic libraries mentioned on the command line after the <b>--as-needed</b> option. Normally the
linker will add a <small>DT_NEEDED</small> tag for each dynamic library mentioned on the command line, regardless of whether the library is actually needed or
not. <b>--as-needed</b> causes a <small>DT_NEEDED</small> tag to only be emitted for a library that satisfies an undefined symbol reference from a regular
object file or, if the library is not found in the <small>DT_NEEDED</small> lists of other libraries linked up to that point, an undefined symbol reference
from another dynamic library. <b>--no-as-needed</b> restores the default behaviour.
</dd><dt><b>--add-needed</b>
</dt><dt><b>--no-add-needed</b>
</dt><dd>These two options have been deprecated because of the similarity of their names to the <b>--as-needed</b> and <b>--no-as-needed</b> options. They have been
replaced by <b>--copy-dt-needed-entries</b> and <b>--no-copy-dt-needed-entries</b>.
</dd><dt><b>-assert</b> <i>keyword</i>
</dt><dd>This option is ignored for SunOS compatibility.
</dd><dt><b>-Bdynamic</b>
</dt><dt><b>-dy</b>
</dt><dt><b>-call_shared</b>
</dt><dd>Link against dynamic libraries. This is only meaningful on 
platforms for which shared libraries are supported. This option is 
normally the default on such
platforms. The different variants of this option are for compatibility 
with various systems. You may use this option multiple times on the 
command line: it
affects library searching for <b>-l</b> options which follow it.
</dd><dt><b>-Bgroup</b>
</dt><dd>Set the <tt>"DF_1_GROUP"</tt> flag in the <tt>"DT_FLAGS_1"</tt> entry in the dynamic section. This causes the runtime linker to handle lookups in this
object and its dependencies to be performed only inside the group. <b>--unresolved-symbols=report-all</b> is implied. This option is only meaningful on
<small>ELF</small> platforms which support shared libraries.
</dd><dt><b>-Bstatic</b>
</dt><dt><b>-dn</b>
</dt><dt><b>-non_shared</b>
</dt><dt><b>-static</b>
</dt><dd>Do not link against shared libraries. This is only meaningful 
on platforms for which shared libraries are supported. The different 
variants of this option
are for compatibility with various systems. You may use this option 
multiple times on the command line: it affects library searching for <b>-l</b> options
which follow it. This option also implies <b>--unresolved-symbols=report-all</b>. This option can be used with <b>-shared</b>.
 Doing so means that a shared
library is being created but that all of the library's external 
references must be resolved by pulling in entries from static libraries.
</dd><dt><b>-Bsymbolic</b>
</dt><dd>When creating a shared library, bind references to global 
symbols to the definition within the shared library, if any. Normally, 
it is possible for a
program linked against a shared library to override the definition 
within the shared library. This option is only meaningful on <small>ELF</small> platforms
which support shared libraries.
</dd><dt><b>-Bsymbolic-functions</b>
</dt><dd>When creating a shared library, bind references to global 
function symbols to the definition within the shared library, if any. 
This option is only
meaningful on <small>ELF</small> platforms which support shared libraries.
</dd><dt><b>--dynamic-list=</b><i>dynamic-list-file</i>
</dt><dd>Specify the name of a dynamic list file to the linker. This is 
typically used when creating shared libraries to specify a list of 
global symbols whose
references shouldn't be bound to the definition within the shared 
library, or creating dynamically linked executables to specify a list of
 symbols which should
be added to the symbol table in the executable. This option is only 
meaningful on <small>ELF</small> platforms which support shared libraries.

<p>The format of the dynamic list is the same as the version node without scope and node name. See <b><small>VERSION</small></b> for more information.
</p></dd><dt><b>--dynamic-list-data</b>
</dt><dd>Include all global data symbols to the dynamic list.
</dd><dt><b>--dynamic-list-cpp-new</b>
</dt><dd>Provide the builtin dynamic list for C <small>++</small> operator new and delete. It is mainly useful for building shared libstdc++.
</dd><dt><b>--dynamic-list-cpp-typeinfo</b>
</dt><dd>Provide the builtin dynamic list for C <small>++</small> runtime type identification.
</dd><dt><b>--check-sections</b>
</dt><dt><b>--no-check-sections</b>
</dt><dd>Asks the linker <i>not</i> to check section addresses after 
they have been assigned to see if there are any overlaps. Normally the 
linker will perform this
check, and if it finds any overlaps it will produce suitable error 
messages. The linker does know about, and does make allowances for 
sections in overlays. The
default behaviour can be restored by using the command line switch <b>--check-sections</b>. Section overlap is not usually checked for relocatable links. You
can force checking in that case by using the <b>--check-sections</b> option.
</dd><dt><b>--copy-dt-needed-entries</b>
</dt><dt><b>--no-copy-dt-needed-entries</b>
</dt><dd>This option affects the treatment of dynamic libraries referred to by <small>DT_NEEDED</small> tags <i>inside</i> <small>ELF</small> dynamic libraries
mentioned on the command line. Normally the linker will add a <small>DT_NEEDED</small> tag to the output binary for each library mentioned in a
<small>DT_NEEDED</small> tag in an input dynamic library. With <b>--no-copy-dt-needed-entries</b> specified on the command line however any dynamic libraries
that follow it will have their <small>DT_NEEDED</small> entries ignored. The default behaviour can be restored with <b>--copy-dt-needed-entries</b>.

<p>This option also has an effect on the resolution of symbols in 
dynamic libraries. With the default setting dynamic libraries mentioned 
on the command line
will be recursively searched, following their <small>DT_NEEDED</small> tags to other libraries, in order to resolve symbols required by the output binary. With
<b>--no-copy-dt-needed-entries</b> specified however the searching of dynamic libraries that follow it will stop with the dynamic library itself. No
<small>DT_NEEDED</small> links will be traversed to resolve symbols.
</p></dd><dt><b>--cref</b>
</dt><dd>Output a cross reference table. If a linker map file is being 
generated, the cross reference table is printed to the map file. 
Otherwise, it is printed on
the standard output.
<p>The format of the table is intentionally simple, so that it may be 
easily processed by a script if necessary. The symbols are printed out, 
sorted by name.
For each symbol, a list of file names is given. If the symbol is 
defined, the first file listed is the location of the definition. The 
remaining files contain
references to the symbol.
</p></dd><dt><b>--no-define-common</b>
</dt><dd>This option inhibits the assignment of addresses to common symbols. The script command <tt>"INHIBIT_COMMON_ALLOCATION"</tt> has the same effect.

<p>The <b>--no-define-common</b> option allows decoupling the decision to assign addresses to Common symbols from the choice of the output file type; otherwise
a non-Relocatable output type forces assigning addresses to Common symbols. Using <b>--no-define-common</b>
 allows Common symbols that are referenced from a
shared library to be assigned addresses only in the main program. This 
eliminates the unused duplicate space in the shared library, and also 
prevents any
possible confusion over resolving to the wrong duplicate when there are 
many dynamic modules with specialized search paths for runtime symbol
resolution.
</p></dd><dt><b>--defsym=</b><i>symbol</i><b>=</b><i>expression</i>
</dt><dd>Create a global symbol in the output file, containing the absolute address given by <i>expression</i>. You may use this option as many times as necessary to
define multiple symbols in the command line. A limited form of arithmetic is supported for the <i>expression</i> in this context: you may give a hexadecimal
constant or the name of an existing symbol, or use <tt>"+"</tt> and <tt>"-"</tt> to add or subtract hexadecimal constants or symbols. If you need more
elaborate expressions, consider using the linker command language from a script. <i>Note:</i> there should be no white space between <i>symbol</i>, the equals
sign ("<b>=</b>"), and <i>expression</i>.
</dd><dt><b>--demangle[=</b><i>style</i><b>]</b>
</dt><dt><b>--no-demangle</b>
</dt><dd>These options control whether to demangle symbol names in error
 messages and other output. When the linker is told to demangle, it 
tries to present symbol
names in a readable fashion: it strips leading underscores if they are 
used by the object file format, and converts C <small>++</small> mangled
 symbol names
into user readable names. Different compilers have different mangling 
styles. The optional demangling style argument can be used to choose an 
appropriate
demangling style for your compiler. The linker will demangle by default 
unless the environment variable <b><small>COLLECT_NO_DEMANGLE</small></b> is set. These
options may be used to override the default.
</dd><dt><b>-I</b><i>file</i>
</dt><dt><b>--dynamic-linker=</b><i>file</i>
</dt><dd>Set the name of the dynamic linker. This is only meaningful when generating dynamically linked <small>ELF</small> executables. The default dynamic linker is
normally correct; don't use this unless you know what you are doing.
</dd><dt><b>--fatal-warnings</b>
</dt><dt><b>--no-fatal-warnings</b>
</dt><dd>Treat all warnings as errors. The default behaviour can be restored with the option <b>--no-fatal-warnings</b>.
</dd><dt><b>--force-exe-suffix</b>
</dt><dd>Make sure that an output file has a .exe suffix.
<p>If a successfully built fully linked output file does not have a <tt>".exe"</tt> or <tt>".dll"</tt> suffix, this option forces the linker to copy the output
file to one of the same name with a <tt>".exe"</tt> suffix. This option is useful when using unmodified Unix makefiles on a Microsoft Windows host, since some
versions of Windows won't run an image unless it ends in a <tt>".exe"</tt> suffix.
</p></dd><dt><b>--gc-sections</b>
</dt><dt><b>--no-gc-sections</b>
</dt><dd>Enable garbage collection of unused input sections. It is 
ignored on targets that do not support this option. The default 
behaviour (of not performing this
garbage collection) can be restored by specifying <b>--no-gc-sections</b> on the command line.
<p><b>--gc-sections</b> decides which input sections are used by 
examining symbols and relocations. The section containing the entry 
symbol and all sections
containing symbols undefined on the command-line will be kept, as will 
sections containing symbols referenced by dynamic objects. Note that 
when building
shared libraries, the linker must assume that any visible symbol is 
referenced. Once this initial set of sections has been determined, the 
linker recursively
marks as used any section referenced by their relocations. See <b>--entry</b> and <b>--undefined</b>.
</p><p>This option can be set when doing a partial link (enabled with option <b>-r</b>). In this case the root of symbols kept must be explicitely specified either
by an <b>--entry</b> or <b>--undefined</b> option or by a <tt>"ENTRY"</tt> command in the linker script.
</p></dd><dt><b>--print-gc-sections</b>
</dt><dt><b>--no-print-gc-sections</b>
</dt><dd>List all sections removed by garbage collection. The listing is
 printed on stderr. This option is only effective if garbage collection 
has been enabled via
the <b>--gc-sections</b>) option. The default behaviour (of not listing the sections that are removed) can be restored by specifying
<b>--no-print-gc-sections</b> on the command line.
</dd><dt><b>--help</b>
</dt><dd>Print a summary of the command-line options on the standard output and exit.
</dd><dt><b>--target-help</b>
</dt><dd>Print a summary of all target specific options on the standard output and exit.
</dd><dt><b>-Map=</b><i>mapfile</i>
</dt><dd>Print a link map to the file <i>mapfile</i>. See the description of the <b>-M</b> option, above.
</dd><dt><b>--no-keep-memory</b>
</dt><dd><b>ld</b> normally optimizes for speed over memory usage by caching the symbol tables of input files in memory. This option tells <b>ld</b> to instead
optimize for memory usage, by rereading the symbol tables as necessary. This may be required if <b>ld</b> runs out of memory space while linking a large
executable.
</dd><dt><b>--no-undefined</b>
</dt><dt><b>-z defs</b>
</dt><dd>Report unresolved symbol references from regular object files. 
This is done even if the linker is creating a non-symbolic shared 
library. The switch
<b>--[no-]allow-shlib-undefined</b> controls the behaviour for reporting unresolved references found in shared libraries being linked in.
</dd><dt><b>--allow-multiple-definition</b>
</dt><dt><b>-z muldefs</b>
</dt><dd>Normally when a symbol is defined multiple times, the linker 
will report a fatal error. These options allow multiple definitions and 
the first definition
will be used.
</dd><dt><b>--allow-shlib-undefined</b>
</dt><dt><b>--no-allow-shlib-undefined</b>
</dt><dd>Allows or disallows undefined symbols in shared libraries. This switch is similar to <b>--no-undefined</b>
 except that it determines the behaviour when the
undefined symbols are in a shared library rather than a regular object 
file. It does not affect how undefined symbols in regular object files 
are handled.

<p>The default behaviour is to report errors for any undefined symbols 
referenced in shared libraries if the linker is being used to create an 
executable, but
to allow them if the linker is being used to create a shared library.
</p><p>The reasons for allowing undefined symbol references in shared libraries specified at link time are that:
</p></dd><dd>• A shared library specified at link time may not be the 
same as the one that is available at load time, so the symbol might 
actually be resolvable at load
time.

<p>• There are some operating systems, eg BeOS and <small>HPPA</small> , where undefined symbols in shared libraries are normal.
</p></dd><dd>The BeOS kernel for example patches shared libraries at 
load time to select whichever function is most appropriate for the 
current architecture. This is
used, for example, to dynamically select an appropriate memset function.
</dd><dt><b>--no-undefined-version</b>
</dt><dd>Normally when a symbol has an undefined version, the linker 
will ignore it. This option disallows symbols with undefined version and
 a fatal error will be
issued instead.
</dd><dt><b>--default-symver</b>
</dt><dd>Create and use a default symbol version (the soname) for unversioned exported symbols.
</dd><dt><b>--default-imported-symver</b>
</dt><dd>Create and use a default symbol version (the soname) for unversioned imported symbols.
</dd><dt><b>--no-warn-mismatch</b>
</dt><dd>Normally <b>ld</b> will give an error if you try to link 
together input files that are mismatched for some reason, perhaps 
because they have been compiled
for different processors or for different endiannesses. This option 
tells <b>ld</b> that it should silently permit such possible errors. This option should
only be used with care, in cases when you have taken some special action that ensures that the linker errors are inappropriate.
</dd><dt><b>--no-warn-search-mismatch</b>
</dt><dd>Normally <b>ld</b> will give a warning if it finds an incompatible library during a library search. This option silences the warning.
</dd><dt><b>--no-whole-archive</b>
</dt><dd>Turn off the effect of the <b>--whole-archive</b> option for subsequent archive files.
</dd><dt><b>--noinhibit-exec</b>
</dt><dd>Retain the executable output file whenever it is still usable. 
Normally, the linker will not produce an output file if it encounters 
errors during the link
process; it exits without writing an output file when it issues any 
error whatsoever.
</dd><dt><b>-nostdlib</b>
</dt><dd>Only search library directories explicitly specified on the 
command line. Library directories specified in linker scripts (including
 linker scripts
specified on the command line) are ignored.
</dd><dt><b>--oformat=</b><i>output-format</i>
</dt><dd><b>ld</b> may be configured to support more than one kind of object file. If your <b>ld</b> is configured this way, you can use the <b>--oformat</b> option
to specify the binary format for the output object file. Even when <b>ld</b> is configured to support alternative object formats, you don't usually need to
specify this, as <b>ld</b> should be configured to produce as a default output format the most usual format on each machine. <i>output-format</i> is a text
string, the name of a particular format supported by the <small>BFD</small> libraries. (You can list the available binary formats with <b>objdump -i</b>.) The
script command <tt>"OUTPUT_FORMAT"</tt> can also specify the output format, but this option overrides it.
</dd><dt><b>-pie</b>
</dt><dt><b>--pic-executable</b>
</dt><dd>Create a position independent executable. This is currently only supported on <small>ELF</small> platforms. Position independent executables are similar to
shared libraries in that they are relocated by the dynamic linker to the virtual address the <small>OS</small>
 chooses for them (which can vary between
invocations). Like normal dynamically linked executables they can be 
executed and symbols defined in the executable cannot be overridden by 
shared
libraries.
</dd><dt><b>-qmagic</b>
</dt><dd>This option is ignored for Linux compatibility.
</dd><dt><b>-Qy</b>

<p>This option is ignored for <small>SVR4</small> compatibility.
</p></dt><dt><b>--relax</b>
</dt><dd>An option with machine dependent effects. This option is only supported on a few targets.
<p>On some platforms, the <b>--relax</b> option performs global optimizations that become possible when the linker resolves addressing in the program, such as
relaxing address modes and synthesizing new instructions in the output object file.
</p><p>On some platforms these link time global optimizations may make 
symbolic debugging of the resulting executable impossible. This is known
 to be the case for
the Matsushita <small>MN10200</small> and <small>MN10300</small> family of processors.
</p><p>On platforms where this is not supported, <b>--relax</b> is accepted, but ignored.
</p></dd><dt><b>--retain-symbols-file=</b><i>filename</i>
</dt><dd>Retain <i>only</i> the symbols listed in the file <i>filename</i>, discarding all others. <i>filename</i>
 is simply a flat file, with one symbol name per
line. This option is especially useful in environments (such as VxWorks)
 where a large global symbol table is accumulated gradually, to conserve
 run-time
memory.
<p><b>--retain-symbols-file</b> does <i>not</i> discard undefined symbols, or symbols needed for relocations.
</p><p>You may only specify <b>--retain-symbols-file</b> once in the command line. It overrides <b>-s</b> and <b>-S</b>.
</p></dd><dt><b>-rpath=</b><i>dir</i>
</dt><dd>Add a directory to the runtime library search path. This is used when linking an <small>ELF</small> executable with shared objects. All <b>-rpath</b>
arguments are concatenated and passed to the runtime linker, which uses them to locate shared objects at runtime. The <b>-rpath</b> option is also used when
locating shared objects which are needed by shared objects explicitly included in the link; see the description of the <b>-rpath-link</b> option. If
<b>-rpath</b> is not used when linking an <small>ELF</small> executable, the contents of the environment variable <tt>"LD_RUN_PATH"</tt> will be used if it is
defined.
<p>The <b>-rpath</b> option may also be used on SunOS. By default, on SunOS, the linker will form a runtime search patch out of all the <b>-L</b> options it is
given. If a <b>-rpath</b> option is used, the runtime search path will be formed exclusively using the <b>-rpath</b> options, ignoring the <b>-L</b> options.
This can be useful when using gcc, which adds many <b>-L</b> options which may be on <small>NFS</small> mounted file systems.
</p><p>For compatibility with other <small>ELF</small> linkers, if the <b>-R</b> option is followed by a directory name, rather than a file name, it is treated as
the <b>-rpath</b> option.
</p></dd><dt><b>-rpath-link=</b><i>dir</i>
</dt><dd>When using <small>ELF</small> or SunOS, one shared library may require another. This happens when an <tt>"ld -shared"</tt> link includes a shared library as
one of the input files.
<p>When the linker encounters such a dependency when doing a non-shared,
 non-relocatable link, it will automatically try to locate the required 
shared library
and include it in the link, if it is not included explicitly. In such a 
case, the <b>-rpath-link</b> option specifies the first set of directories to search.
The <b>-rpath-link</b> option may specify a sequence of directory names 
either by specifying a list of names separated by colons, or by 
appearing multiple
times.
</p><p>This option should be used with caution as it overrides the 
search path that may have been hard compiled into a shared library. In 
such a case it is
possible to use unintentionally a different search path than the runtime
 linker would do.
</p><p>The linker uses the following search paths to locate required shared libraries:
</p></dd><dd>1.

<p>Any directories specified by <b>-rpath-link</b> options.

</p><p>2.

</p><p>Any directories specified by <b>-rpath</b> options. The difference between <b>-rpath</b> and <b>-rpath-link</b> is that directories specified by
<b>-rpath</b> options are included in the executable and used at runtime, whereas the <b>-rpath-link</b> option is only effective at link time. Searching
<b>-rpath</b> in this way is only supported by native linkers and cross linkers which have been configured with the <b>--with-sysroot</b> option.

</p><p>3.

</p><p>On an <small>ELF</small> system, for native linkers, if the <b>-rpath</b> and <b>-rpath-link</b> options were not used, search the contents of the
environment variable <tt>"LD_RUN_PATH"</tt>.

</p><p>4.

</p><p>On SunOS, if the <b>-rpath</b> option was not used, search any directories specified using <b>-L</b> options.

</p><p>5.

</p><p>For a native linker, the search the contents of the environment variable <tt>"LD_LIBRARY_PATH"</tt>.

</p><p>6.

</p><p>For a native <small>ELF</small> linker, the directories in <tt>"DT_RUNPATH"</tt> or <tt>"DT_RPATH"</tt> of a shared library are searched for shared
libraries needed by it. The <tt>"DT_RPATH"</tt> entries are ignored if <tt>"DT_RUNPATH"</tt> entries exist.

</p><p>7.

</p><p>The default directories, normally <i>/lib</i> and <i>/usr/lib</i>.

</p><p>8.

</p><p>For a native linker on an <small>ELF</small> system, if the file <i>/etc/ld.so.conf</i> exists, the list of directories found in that file.
</p></dd><dd>If the required shared library is not found, the linker will issue a warning and continue with the link.
</dd><dt><b>-shared</b>
</dt><dt><b>-Bshareable</b>
</dt><dd>Create a shared library. This is currently only supported on <small>ELF</small> , <small>XCOFF</small> and SunOS platforms. On SunOS, the linker will
automatically create a shared library if the <b>-e</b> option is not used and there are undefined symbols in the link.
</dd><dt><b>--sort-common</b>
</dt><dt><b>--sort-common=ascending</b>
</dt><dt><b>--sort-common=descending</b>
</dt><dd>This option tells <b>ld</b> to sort the common symbols by 
alignment in ascending or descending order when it places them in the 
appropriate output sections.
The symbol alignments considered are sixteen-byte or larger, eight-byte,
 four-byte, two-byte, and one-byte. This is to prevent gaps between 
symbols due to
alignment constraints. If no sorting order is specified, then descending
 order is assumed.
</dd><dt><b>--sort-section=name</b>
</dt><dd>This option will apply <tt>"SORT_BY_NAME"</tt> to all wildcard section patterns in the linker script.
</dd><dt><b>--sort-section=alignment</b>
</dt><dd>This option will apply <tt>"SORT_BY_ALIGNMENT"</tt> to all wildcard section patterns in the linker script.
</dd><dt><b>--split-by-file[=</b><i>size</i><b>]</b>
</dt><dd>Similar to <b>--split-by-reloc</b> but creates a new output section for each input file when <i>size</i> is reached. <i>size</i> defaults to a size of 1 if
not given.
</dd><dt><b>--split-by-reloc[=</b><i>count</i><b>]</b>
</dt><dd>Tries to creates extra sections in the output file so that no single output section in the file contains more than <i>count</i> relocations. This is useful
when generating huge relocatable files for downloading into certain real time kernels with the <small>COFF</small> object file format; since
<small>COFF</small> cannot represent more than 65535 relocations in a 
single section. Note that this will fail to work with object file 
formats which do not
support arbitrary sections. The linker will not split up individual 
input sections for redistribution, so if a single input section contains
 more than
<i>count</i> relocations one output section will contain that many relocations. <i>count</i> defaults to a value of 32768.
</dd><dt><b>--stats</b>
</dt><dd>Compute and display statistics about the operation of the linker, such as execution time and memory usage.
</dd><dt><b>--sysroot=</b><i>directory</i>
</dt><dd>Use <i>directory</i> as the location of the sysroot, overriding
 the configure-time default. This option is only supported by linkers 
that were configured
using <b>--with-sysroot</b>.
</dd><dt><b>--traditional-format</b>
</dt><dd>For some targets, the output of <b>ld</b> is different in some ways from the output of some existing linker. This switch requests <b>ld</b> to use the
traditional format instead.
<p>For example, on SunOS, <b>ld</b> combines duplicate entries in the symbol string table. This can reduce the size of an output file with full debugging
information by over 30 percent. Unfortunately, the SunOS <tt>"dbx"</tt> program can not read the resulting program (<tt>"gdb"</tt> has no trouble). The
<b>--traditional-format</b> switch tells <b>ld</b> to not combine duplicate entries.
</p></dd><dt><b>--section-start=</b><i>sectionname</i><b>=</b><i>org</i>
</dt><dd>Locate a section in the output file at the absolute address given by <i>org</i>. You may use this option as many times as necessary to locate multiple
sections in the command line. <i>org</i> must be a single hexadecimal integer; for compatibility with other linkers, you may omit the leading <b>0x</b> usually
associated with hexadecimal values. <i>Note:</i> there should be no white space between <i>sectionname</i>, the equals sign ("<b>=</b>"), and
<i>org</i>.
</dd><dt><b>-Tbss=</b><i>org</i>
</dt><dt><b>-Tdata=</b><i>org</i>
</dt><dt><b>-Ttext=</b><i>org</i>
</dt><dd>Same as <b>--section-start</b>, with <tt>".bss"</tt>, <tt>".data"</tt> or <tt>".text"</tt> as the <i>sectionname</i>.
</dd><dt><b>-Ttext-segment=</b><i>org</i>
</dt><dd>When creating an <small>ELF</small> executable or shared object, it will set the address of the first byte of the text segment.
</dd><dt><b>--unresolved-symbols=</b><i>method</i>
</dt><dd>Determine how to handle unresolved symbols. There are four possible values for <b>method</b>:
</dd><dd><b>ignore-all</b>
</dd><dd>Do not report any unresolved symbols.
</dd><dd><b>report-all</b>
</dd><dd>Report all unresolved symbols. This is the default.
</dd><dd><b>ignore-in-object-files</b>
</dd><dd>Report unresolved symbols that are contained in shared libraries, but ignore them if they come from regular object files.
</dd><dd><b>ignore-in-shared-libs</b>
</dd><dd>Report unresolved symbols that come from regular object files, 
but ignore them if they come from shared libraries. This can be useful 
when creating a
dynamic binary and it is known that all the shared libraries that it 
should be referencing are included on the linker's command line.
</dd><dd>The behaviour for shared libraries on their own can also be controlled by the <b>--[no-]allow-shlib-undefined</b> option.
<p>Normally the linker will generate an error message for each reported unresolved symbol but the option <b>--warn-unresolved-symbols</b> can change this to a
warning.
</p></dd><dt><b>--dll-verbose</b>
</dt><dt><b>--verbose</b>
</dt><dd>Display the version number for <b>ld</b> and list the linker emulations supported. Display which input files can and cannot be opened. Display the linker
script being used by the linker.
</dd><dt><b>--version-script=</b><i>version-scriptfile</i>
</dt><dd>Specify the name of a version script to the linker. This is 
typically used when creating shared libraries to specify additional 
information about the
version hierarchy for the library being created. This option is only 
fully supported on <small>ELF</small> platforms which support shared libraries; see
<b><small>VERSION</small></b> . It is partially supported on <small>PE</small> platforms, which can use version scripts to filter symbol visibility in
auto-export mode: any symbols marked <b>local</b> in the version script will not be exported.
</dd><dt><b>--warn-common</b>
</dt><dd>Warn when a common symbol is combined with another common 
symbol or with a symbol definition. Unix linkers allow this somewhat 
sloppy practise, but linkers
on some other operating systems do not. This option allows you to find 
potential problems from combining global symbols. Unfortunately, some C 
libraries use
this practise, so you may get some warnings about symbols in the 
libraries as well as in your programs.
<p>There are three kinds of global symbols, illustrated here by C examples:
</p></dd><dd><b>int i = 1;</b>
</dd><dd>A definition, which goes in the initialized data section of the output file.
</dd><dd><b>extern int i;</b>
</dd><dd>An undefined reference, which does not allocate space. There 
must be either a definition or a common symbol for the variable 
somewhere.
</dd><dd><b>int i;</b>
</dd><dd>A common symbol. If there are only (one or more) common symbols
 for a variable, it goes in the uninitialized data area of the output 
file. The linker merges
multiple common symbols for the same variable into a single symbol. If 
they are of different sizes, it picks the largest size. The linker turns
 a common symbol
into a declaration, if there is a definition of the same variable.
</dd><dd>The <b>--warn-common</b> option can produce five kinds of 
warnings. Each warning consists of a pair of lines: the first describes 
the symbol just
encountered, and the second describes the previous symbol encountered 
with the same name. One or both of the two symbols will be a common 
symbol.
</dd><dd>1.

<p>Turning a common symbol into a reference, because there is already a definition for the symbol.
</p></dd><dd>

<pre class="code">&lt;file&gt;(&lt;section&gt;): warning: common of `&lt;symbol&gt;'
   overridden by definition
&lt;file&gt;(&lt;section&gt;): warning: defined here</pre>
</dd><dd>2.

<p>Turning a common symbol into a reference, because a later definition 
for the symbol is encountered. This is the same as the previous case, 
except that the
symbols are encountered in a different order.
</p></dd><dd>

<pre class="code">&lt;file&gt;(&lt;section&gt;): warning: definition of `&lt;symbol&gt;'
   overriding common
&lt;file&gt;(&lt;section&gt;): warning: common is here</pre>
</dd><dd>3.

<p>Merging a common symbol with a previous same-sized common symbol.
</p></dd><dd>

<pre class="code">&lt;file&gt;(&lt;section&gt;): warning: multiple common
   of `&lt;symbol&gt;'
&lt;file&gt;(&lt;section&gt;): warning: previous common is here</pre>
</dd><dd>4.

<p>Merging a common symbol with a previous larger common symbol.
</p></dd><dd>

<pre class="code">&lt;file&gt;(&lt;section&gt;): warning: common of `&lt;symbol&gt;'
   overridden by larger common
&lt;file&gt;(&lt;section&gt;): warning: larger common is here</pre>
</dd><dd>5.

<p>Merging a common symbol with a previous smaller common symbol. This 
is the same as the previous case, except that the symbols are 
encountered in a different
order.
</p></dd><dd>

<pre class="code">&lt;file&gt;(&lt;section&gt;): warning: common of `&lt;symbol&gt;'
   overriding smaller common
&lt;file&gt;(&lt;section&gt;): warning: smaller common is here</pre>
</dd><dt><b>--warn-constructors</b>
</dt><dd>Warn if any global constructors are used. This is only useful for a few object file formats. For formats like <small>COFF</small> or <small>ELF</small> ,
the linker can not detect the use of global constructors.
</dd><dt><b>--warn-multiple-gp</b>
</dt><dd>Warn if multiple global pointer values are required in the 
output file. This is only meaningful for certain processors, such as the
 Alpha. Specifically,
some processors put large-valued constants in a special section. A 
special register (the global pointer) points into the middle of this 
section, so that
constants can be loaded efficiently via a base-register relative 
addressing mode. Since the offset in base-register relative mode is 
fixed and relatively small
(e.g., 16 bits), this limits the maximum size of the constant pool. 
Thus, in large programs, it is often necessary to use multiple global 
pointer values in
order to be able to address all possible constants. This option causes a
 warning to be issued whenever this case occurs.
</dd><dt><b>--warn-once</b>
</dt><dd>Only warn once for each undefined symbol, rather than once per module which refers to it.
</dd><dt><b>--warn-section-align</b>
</dt><dd>Warn if the address of an output section is changed because of 
alignment. Typically, the alignment will be set by an input section. The
 address will only be
changed if it not explicitly specified; that is, if the <tt>"SECTIONS"</tt> command does not specify a start address for the section.
</dd><dt><b>--warn-shared-textrel</b>
</dt><dd>Warn if the linker adds a <small>DT_TEXTREL</small> to a shared object.
</dd><dt><b>--warn-alternate-em</b>
</dt><dd>Warn if an object has alternate <small>ELF</small> machine code.
</dd><dt><b>--warn-unresolved-symbols</b>
</dt><dd>If the linker is going to report an unresolved symbol (see the option <b>--unresolved-symbols</b>) it will normally generate an error. This option makes it
generate a warning instead.
</dd><dt><b>--error-unresolved-symbols</b>
</dt><dd>This restores the linker's default behaviour of generating errors when it is reporting unresolved symbols.
</dd><dt><b>--whole-archive</b>
</dt><dd>For each archive mentioned on the command line after the <b>--whole-archive</b>
 option, include every object file in the archive in the link, rather 
than
searching the archive for the required object files. This is normally 
used to turn an archive file into a shared library, forcing every object
 to be included
in the resulting shared library. This option may be used more than once.
<p>Two notes when using this option from gcc: First, gcc doesn't know about this option, so you have to use <b>-Wl,-whole-archive</b>. Second, don't forget to
use <b>-Wl,-no-whole-archive</b> after your list of archives, because gcc will add its own list of archives to your link and you may not want this flag to
affect those as well.
</p></dd><dt><b>--wrap=</b><i>symbol</i>
</dt><dd>Use a wrapper function for <i>symbol</i>. Any undefined reference to <i>symbol</i> will be resolved to <tt>"__wrap_ <i>symbol</i> "</tt>.
Any undefined reference to <tt>"__real_ <i>symbol</i> "</tt> will be resolved to <i>symbol</i>.
<p>This can be used to provide a wrapper for a system function. The wrapper function should be called <tt>"__wrap_ <i>symbol</i> "</tt>. If it
wishes to call the system function, it should call <tt>"__real_ <i>symbol</i> "</tt>.
</p><p>Here is a trivial example:
</p><pre class="code">void *
__wrap_malloc (size_t c)
{
  printf ("malloc called with %zu\n", c);
  return __real_malloc (c);
}</pre>If you link other code with this file using <b>--wrap malloc</b>, then all calls to <tt>"malloc"</tt> will call the function <tt>"__wrap_malloc"</tt>
instead. The call to <tt>"__real_malloc"</tt> in <tt>"__wrap_malloc"</tt> will call the real <tt>"malloc"</tt> function.
<p>You may wish to provide a <tt>"__real_malloc"</tt> function as well, so that links without the <b>--wrap</b> option will succeed. If you do this, you should
not put the definition of <tt>"__real_malloc"</tt> in the same file as <tt>"__wrap_malloc"</tt>; if you do, the assembler may resolve the call before the
linker has a chance to wrap it to <tt>"malloc"</tt>.
</p></dd><dt><b>--eh-frame-hdr</b>
</dt><dd>Request creation of <tt>".eh_frame_hdr"</tt> section and <small>ELF</small> <tt>"PT_GNU_EH_FRAME"</tt> segment header.
</dd><dt><b>--enable-new-dtags</b>
</dt><dt><b>--disable-new-dtags</b>
</dt><dd>This linker can create the new dynamic tags in <small>ELF</small> . But the older <small>ELF</small> systems may not understand them. If you specify
<b>--enable-new-dtags</b>, the dynamic tags will be created as needed. If you specify <b>--disable-new-dtags</b>, no new dynamic tags will be created. By
default, the new dynamic tags are not created. Note that those options are only available for <small>ELF</small> systems.
</dd><dt><b>--hash-size=</b><i>number</i>
</dt><dd>Set the default size of the linker's hash tables to a prime number close to <i>number</i>.
 Increasing this value can reduce the length of time it takes the
linker to perform its tasks, at the expense of increasing the linker's 
memory requirements. Similarly reducing this value can reduce the memory
 requirements at
the expense of speed.
</dd><dt><b>--hash-style=</b><i>style</i>
</dt><dd>Set the type of linker's hash <b>table</b>(s). <i>style</i> can be either <tt>"sysv"</tt> for classic <small>ELF</small> <tt>".hash"</tt> section, <tt>"gnu"</tt>
for new style <small>GNU</small> <tt>".gnu.hash"</tt> section or <tt>"both"</tt> for both the classic <small>ELF</small> <tt>".hash"</tt> and new style
<small>GNU</small> <tt>".gnu.hash"</tt> hash tables. The default is <tt>"sysv"</tt>.
</dd><dt><b>--reduce-memory-overheads</b>
</dt><dd>This option reduces memory requirements at ld runtime, at the 
expense of linking speed. This was introduced to select the old O(n^2) 
algorithm for link map
file generation, rather than the new <b>O</b>(n) algorithm which uses about 40% more memory for symbol storage.
<p>Another effect of the switch is to set the default hash table size to
 1021, which again saves memory at the cost of lengthening the linker's 
run time. This
is not done however if the <b>--hash-size</b> switch has been used.
</p><p>The <b>--reduce-memory-overheads</b> switch may be also be used to enable other tradeoffs in future versions of the linker.
</p></dd><dt><b>--build-id</b>
</dt><dt><b>--build-id=</b><i>style</i>
</dt><dd>Request creation of <tt>".note.gnu.build-id"</tt> <small>ELF</small> note section. The contents of the note are unique bits identifying this linked file.
<i>style</i> can be <tt>"uuid"</tt> to use 128 random bits, <tt>"sha1"</tt> to use a 160-bit <small>SHA1</small> hash on the normative parts of the output
contents, <tt>"md5"</tt> to use a 128-bit <small>MD5</small> hash on the normative parts of the output contents, or
<tt>"0x <i>hexstring</i> "</tt> to use a chosen bit string specified as an even number of hexadecimal digits (<tt>"-"</tt> and <tt>":"</tt>
characters between digit pairs are ignored). If <i>style</i> is omitted, <tt>"sha1"</tt> is used.
<p>The <tt>"md5"</tt> and <tt>"sha1"</tt> styles produces an identifier 
that is always the same in an identical output file, but will be unique 
among all
nonidentical output files. It is not intended to be compared as a 
checksum for the file's contents. A linked file may be changed later by 
other tools, but the
build <small>ID</small> bit string identifying the original linked file does not change.
</p><p>Passing <tt>"none"</tt> for <i>style</i> disables the setting from any <tt>"--build-id"</tt> options earlier on the command line.
</p></dd><dt>The i386 <small>PE</small> linker supports the <b>-shared</b> option, which causes the output to be a dynamically linked library ( <small>DLL</small> )
instead of a normal executable. You should name the output <tt>"*.dll"</tt> when you use this option. In addition, the linker fully supports the standard
<tt>"*.def"</tt> files, which may be specified on the linker command 
line like an object file (in fact, it should precede archives it exports
 symbols from, to
ensure that they get linked in, just like a normal object file).
<p>In addition to the options common to all targets, the i386 <small>PE</small> linker support additional command line options that are specific to the i386
<small>PE</small> target. Options that take values may be separated from their values by either a space or an equals sign.
</p></dt><dt><b>--add-stdcall-alias</b>
</dt><dd>If given, symbols with a stdcall suffix (@<i>nn</i>) will be exported as-is and also with the suffix stripped. [This option is specific to the i386
<small>PE</small> targeted port of the linker]
</dd><dt><b>--base-file</b> <i>file</i>
</dt><dd>Use <i>file</i> as the name of a file in which to save the base addresses of all the relocations needed for generating DLLs with <i>dlltool</i>. [This is an
i386 <small>PE</small> specific option]
</dd><dt><b>--dll</b>
</dt><dd>Create a <small>DLL</small> instead of a regular executable. You may also use <b>-shared</b> or specify a <tt>"LIBRARY"</tt> in a given <tt>".def"</tt>
file. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--enable-long-section-names</b>
</dt><dt><b>--disable-long-section-names</b>
</dt><dd>The <small>PE</small> variants of the Coff object format add an
 extension that permits the use of section names longer than eight 
characters, the normal
limit for Coff. By default, these names are only allowed in object 
files, as fully-linked executable images do not carry the Coff string 
table required to
support the longer names. As a <small>GNU</small> extension, it is 
possible to allow their use in executable images as well, or to 
(probably pointlessly!)
disallow it in object files, by using these two options. Executable 
images generated with these long section names are slightly 
non-standard, carrying as they
do a string table, and may generate confusing output when examined with 
non-GNU PE-aware tools, such as file viewers and dumpers. However, <small>GDB</small>
relies on the use of <small>PE</small> long section names to find Dwarf-2 debug information sections in an executable image at runtime, and so if neither
option is specified on the command-line, <b>ld</b> will enable long section names, overriding the default and technically correct behaviour, when it finds the
presence of debug information while linking an executable image and not stripping symbols. [This option is valid for all <small>PE</small> targeted ports of
the linker]
</dd><dt><b>--enable-stdcall-fixup</b>
</dt><dt><b>--disable-stdcall-fixup</b>
</dt><dd>If the link finds a symbol that it cannot resolve, it will 
attempt to do "fuzzy linking" by looking for another defined symbol that
 differs only in the
format of the symbol name (cdecl vs stdcall) and will resolve that 
symbol by linking to the match. For example, the undefined symbol <tt>"_foo"</tt> might be
linked to the function <tt>"_foo@12"</tt>, or the undefined symbol <tt>"_bar@16"</tt> might be linked to the function <tt>"_bar"</tt>.
 When the linker does
this, it prints a warning, since it normally should have failed to link,
 but sometimes import libraries generated from third-party dlls may need
 this feature
to be usable. If you specify <b>--enable-stdcall-fixup</b>, this feature is fully enabled and warnings are not printed. If you specify
<b>--disable-stdcall-fixup</b>, this feature is disabled and such mismatches are considered to be errors. [This option is specific to the i386
<small>PE</small> targeted port of the linker]
</dd><dt><b>--export-all-symbols</b>
</dt><dd>If given, all global symbols in the objects used to build a <small>DLL</small> will be exported by the <small>DLL</small> . Note that this is the default if
there otherwise wouldn't be any exported symbols. When symbols are explicitly exported via <small>DEF</small> files or implicitly exported via function
attributes, the default is to not export anything else unless this option is given. Note that the symbols <tt>"DllMain@12"</tt>, <tt>"DllEntryPoint@0"</tt>,
<tt>"DllMainCRTStartup@12"</tt>, and <tt>"impure_ptr"</tt> will not be automatically exported. Also, symbols imported from other DLLs will not be re-exported,
nor will symbols specifying the <small>DLL</small> 's internal layout such as those beginning with <tt>"_head_"</tt> or ending with <tt>"_iname"</tt>. In
addition, no symbols from <tt>"libgcc"</tt>, <tt>"libstd++"</tt>, <tt>"libmingw32"</tt>, or <tt>"crtX.o"</tt> will be exported. Symbols whose names begin with
<tt>"__rtti_"</tt> or <tt>"__builtin_"</tt> will not be exported, to help with C <small>++</small> DLLs. Finally, there is an extensive list of cygwin-private
symbols that are not exported (obviously, this applies on when building DLLs for cygwin targets). These cygwin-excludes are: <tt>"_cygwin_dll_entry@12"</tt>,
<tt>"_cygwin_crt0_common@8"</tt>, <tt>"_cygwin_noncygwin_dll_entry@12"</tt>, <tt>"_fmode"</tt>, <tt>"_impure_ptr"</tt>, <tt>"cygwin_attach_dll"</tt>,
<tt>"cygwin_premain0"</tt>, <tt>"cygwin_premain1"</tt>, <tt>"cygwin_premain2"</tt>, <tt>"cygwin_premain3"</tt>, and <tt>"environ"</tt>. [This option is
specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--exclude-symbols</b> <i>symbol</i><b>,</b><i>symbol</i><b>,...</b>
</dt><dd>Specifies a list of symbols which should not be automatically 
exported. The symbol names may be delimited by commas or colons. [This 
option is specific to
the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--file-alignment</b>
</dt><dd>Specify the file alignment. Sections in the file will always 
begin at file offsets which are multiples of this number. This defaults 
to 512. [This option is
specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--heap</b> <i>reserve</i>
</dt><dt><b>--heap</b> <i>reserve</i><b>,</b><i>commit</i>
</dt><dd>Specify the number of bytes of memory to reserve (and 
optionally commit) to be used as heap for this program. The default is 
1Mb reserved, 4K committed.
[This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--image-base</b> <i>value</i>
</dt><dd>Use <i>value</i> as the base address of your program or dll. 
This is the lowest memory location that will be used when your program 
or dll is loaded. To
reduce the need to relocate and improve performance of your dlls, each 
should have a unique base address and not overlap any other dlls. The 
default is
0x400000 for executables, and 0x10000000 for dlls. [This option is 
specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--kill-at</b>
</dt><dd>If given, the stdcall suffixes (@<i>nn</i>) will be stripped from symbols before they are exported. [This option is specific to the i386 <small>PE</small>
targeted port of the linker]
</dd><dt><b>--large-address-aware</b>
</dt><dd>If given, the appropriate bit in the "Characteristics" field of the <small>COFF</small> header is set to indicate that this executable supports virtual
addresses greater than 2 gigabytes. This should be used in conjunction with the /3GB or /USERVA=<i>value</i> megabytes switch in the "[operating systems]"
section of the <small>BOOT</small> .INI. Otherwise, this bit has no effect. [This option is specific to <small>PE</small> targeted ports of the linker]
</dd><dt><b>--major-image-version</b> <i>value</i>
</dt><dd>Sets the major number of the "image version". Defaults to 1. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--major-os-version</b> <i>value</i>
</dt><dd>Sets the major number of the "os version". Defaults to 4. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--major-subsystem-version</b> <i>value</i>
</dt><dd>Sets the major number of the "subsystem version". Defaults to 4. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--minor-image-version</b> <i>value</i>
</dt><dd>Sets the minor number of the "image version". Defaults to 0. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--minor-os-version</b> <i>value</i>
</dt><dd>Sets the minor number of the "os version". Defaults to 0. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--minor-subsystem-version</b> <i>value</i>
</dt><dd>Sets the minor number of the "subsystem version". Defaults to 0. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--output-def</b> <i>file</i>
</dt><dd>The linker will create the file <i>file</i> which will contain a <small>DEF</small> file corresponding to the <small>DLL</small> the linker is generating.
This <small>DEF</small> file (which should be called <tt>"*.def"</tt>) may be used to create an import library with <tt>"dlltool"</tt> or may be used as a
reference to automatically or implicitly exported symbols. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--out-implib</b> <i>file</i>
</dt><dd>The linker will create the file <i>file</i> which will contain an import lib corresponding to the <small>DLL</small> the linker is generating. This import
lib (which should be called <tt>"*.dll.a"</tt> or <tt>"*.a"</tt> may be used to link clients against the generated <small>DLL</small> ; this behaviour makes it
possible to skip a separate <tt>"dlltool"</tt> import library creation step. [This option is specific to the i386 <small>PE</small> targeted port of the
linker]
</dd><dt><b>--enable-auto-image-base</b>
</dt><dd>Automatically choose the image base for DLLs, unless one is specified using the <tt>"--image-base"</tt> argument. By using a hash generated from the dllname
to create unique image bases for each <small>DLL</small> , in-memory collisions and relocations which can delay program execution are avoided. [This option is
specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--disable-auto-image-base</b>
</dt><dd>Do not automatically generate a unique image base. If there is no user-specified image base (<tt>"--image-base"</tt>) then use the platform default. [This
option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--dll-search-prefix</b> <i>string</i>
</dt><dd>When linking dynamically to a dll without an import library, search for <tt>"&lt;string&gt;&lt;basename&gt;.dll"</tt> in preference to
<tt>"lib&lt;basename&gt;.dll"</tt>. This behaviour allows easy distinction between DLLs built for the various "subplatforms": native, cygwin, uwin, pw, etc.
For instance, cygwin DLLs typically use <tt>"--dll-search-prefix=cyg"</tt>. [This option is specific to the i386 <small>PE</small> targeted port of the
linker]
</dd><dt><b>--enable-auto-import</b>
</dt><dd>Do sophisticated linking of <tt>"_symbol"</tt> to <tt>"__imp__symbol"</tt> for <small>DATA</small> imports from DLLs, and create the necessary thunking
symbols when building the import libraries with those <small>DATA</small> exports. Note: Use of the 'auto-import' extension will cause the text section of the
image file to be made writable. This does not conform to the PE-COFF format specification published by Microsoft.
<p>Note - use of the 'auto-import' extension will also cause read only 
data which would normally be placed into the .rdata section to be placed
 into the .data
section instead. This is in order to work around a problem with consts 
that is described here: <a href="http://www.cygwin.com/ml/cygwin/2004-09/msg01101.html">http://www.cygwin.com/ml/cygwin/2004-09/msg01101.html</a>

</p><p>Using 'auto-import' generally will 'just work' -- but sometimes you may see this message:
</p><p>"variable '&lt;var&gt;' can't be auto-imported. Please read the documentation for ld's <tt>"--enable-auto-import"</tt> for details."
</p><p>This message occurs when some (sub)expression accesses an address
 ultimately given by the sum of two constants (Win32 import tables only 
allow one).
Instances where this may occur include accesses to member fields of 
struct variables imported from a <small>DLL</small> , as well as using a constant index
into an array variable imported from a <small>DLL</small> . Any multiword variable (arrays, structs, long long, etc) may trigger this error condition. However,
regardless of the exact data type of the offending exported variable, ld will always detect it, issue the warning, and exit.
</p><p>There are several ways to address this difficulty, regardless of the data type of the exported variable:
</p><p>One way is to use --enable-runtime-pseudo-reloc switch. This 
leaves the task of adjusting references in your client code for runtime 
environment, so this
method works only when runtime environment supports this feature.
</p><p>A second solution is to force one of the 'constants' to be a 
variable -- that is, unknown and un-optimizable at compile time. For 
arrays, there are two
possibilities: a) make the indexee (the array's address) a variable, or 
b) make the 'constant' index a variable. Thus:
</p><pre class="code">extern type extern_array[];
extern_array[1] --&gt;
   { volatile type *t=extern_array; t[1] }</pre>or
<pre class="code">extern type extern_array[];
extern_array[1] --&gt;
   { volatile int t=1; extern_array[t] }</pre>For structs (and most 
other multiword data types) the only option is to make the struct itself
 (or the long long, or the ...) variable:
<pre class="code">extern struct s extern_struct;
extern_struct.field --&gt;
   { volatile struct s *t=&amp;extern_struct; t-&gt;field }</pre>or
<pre class="code">extern long long extern_ll;
extern_ll --&gt;
  { volatile long long * local_ll=&amp;extern_ll; *local_ll }</pre>A third method of dealing with this difficulty is to abandon 'auto-import' for the offending symbol and mark it with <tt>"__declspec(dllimport)"</tt>.
However, in practise that requires using compile-time #defines to indicate whether you are building a <small>DLL</small> , building client code that will link
to the <small>DLL</small> , or merely building/linking to a static 
library. In making the choice between the various methods of resolving 
the 'direct address
with constant offset' problem, you should consider typical real-world 
usage:
<p>Original:
</p><pre class="code">--foo.h
extern int arr[];
--foo.c
#include "foo.h"
void main(int argc, char **argv){
  printf("%d\n",arr[1]);
}</pre>Solution 1:
<pre class="code">--foo.h
extern int arr[];
--foo.c
#include "foo.h"
void main(int argc, char **argv){
  /* This workaround is for win32 and cygwin; do not "optimize" */
  volatile int *parr = arr;
  printf("%d\n",parr[1]);
}</pre>Solution 2:
<pre class="code">--foo.h
/* Note: auto-export is assumed (no __declspec(dllexport)) */
#if (defined(_WIN32) || defined(__CYGWIN__)) &amp;&amp; \
  !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
#define FOO_IMPORT __declspec(dllimport)
#else
#define FOO_IMPORT
#endif
extern FOO_IMPORT int arr[];
--foo.c
#include "foo.h"
void main(int argc, char **argv){
  printf("%d\n",arr[1]);
}</pre>A fourth way to avoid this problem is to re-code your library to 
use a functional interface rather than a data interface for the 
offending variables (e.g.
<i>set_foo()</i> and <i>get_foo()</i> accessor functions). [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--disable-auto-import</b>
</dt><dd>Do not attempt to do sophisticated linking of <tt>"_symbol"</tt> to <tt>"__imp__symbol"</tt> for <small>DATA</small> imports from DLLs. [This option is
specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--enable-runtime-pseudo-reloc</b>
</dt><dd>If your code contains expressions described in --enable-auto-import section, that is, <small>DATA</small> imports from <small>DLL</small>
 with non-zero
offset, this switch will create a vector of 'runtime pseudo relocations'
 which can be used by runtime environment to adjust references to such 
data in your
client code. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--disable-runtime-pseudo-reloc</b>
</dt><dd>Do not create pseudo relocations for non-zero offset <small>DATA</small> imports from DLLs. This is the default. [This option is specific to the i386
<small>PE</small> targeted port of the linker]
</dd><dt><b>--enable-extra-pe-debug</b>
</dt><dd>Show additional debug info related to auto-import symbol thunking. [This option is specific to the i386 <small>PE</small> targeted port of the
linker]
</dd><dt><b>--section-alignment</b>
</dt><dd>Sets the section alignment. Sections in memory will always 
begin at addresses which are a multiple of this number. Defaults to 
0x1000. [This option is
specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--stack</b> <i>reserve</i>
</dt><dt><b>--stack</b> <i>reserve</i><b>,</b><i>commit</i>
</dt><dd>Specify the number of bytes of memory to reserve (and 
optionally commit) to be used as stack for this program. The default is 
2Mb reserved, 4K committed.
[This option is specific to the i386 <small>PE</small> targeted port of the linker]
</dd><dt><b>--subsystem</b> <i>which</i>
</dt><dt><b>--subsystem</b> <i>which</i><b>:</b><i>major</i>
</dt><dt><b>--subsystem</b> <i>which</i><b>:</b><i>major</i><b>.</b><i>minor</i>
</dt><dd>Specifies the subsystem under which your program will execute. The legal values for <i>which</i> are <tt>"native"</tt>, <tt>"windows"</tt>,
<tt>"console"</tt>, <tt>"posix"</tt>, and <tt>"xbox"</tt>. You may optionally set the subsystem version also. Numeric values are also accepted for
<i>which</i>. [This option is specific to the i386 <small>PE</small> targeted port of the linker]
<p>The following options set flags in the <tt>"DllCharacteristics"</tt> field of the <small>PE</small> file header: [These options are specific to
<small>PE</small> targeted ports of the linker]
</p></dd><dt><b>--dynamicbase</b>
</dt><dd>The image base address may be relocated using address space layout randomization ( <small>ASLR</small> ). This feature was introduced with <small>MS</small>
Windows Vista for i386 <small>PE</small> targets.
</dd><dt><b>--forceinteg</b>
</dt><dd>Code integrity checks are enforced.
</dd><dt><b>--nxcompat</b>
</dt><dd>The image is compatible with the Data Execution Prevention. This feature was introduced with <small>MS</small> Windows <small>XP SP2</small> for i386
<small>PE</small> targets.
</dd><dt><b>--no-isolation</b>
</dt><dd>Although the image understands isolation, do not isolate the image.
</dd><dt><b>--no-seh</b>
</dt><dd>The image does not use <small>SEH</small> . No <small>SE</small> handler may be called from this image.
</dd><dt><b>--no-bind</b>
</dt><dd>Do not bind this image.
</dd><dt><b>--wdmdriver</b>
</dt><dd>The driver uses the <small>MS</small> Windows Driver Model.
</dd><dt><b>--tsaware</b>
</dt><dd>The image is Terminal Server aware.
</dd><dt>The 68HC11 and 68HC12 linkers support specific options to 
control the memory bank switching mapping and trampoline code 
generation.
</dt><dt><b>--no-trampoline</b>
</dt><dd>This option disables the generation of trampoline. By default a
 trampoline is generated for each far function which is called using a <tt>"jsr"</tt>
instruction (this happens when a pointer to a far function is taken).
</dd><dt><b>--bank-window</b> <i>name</i>
</dt><dd>This option indicates to the linker the name of the memory region in the <b><small>MEMORY</small></b> specification that describes the memory bank window.
The definition of such region is then used by the linker to compute paging and addresses within the memory window.
</dd><dt>The following options are supported to control handling of <small>GOT</small> generation when linking for 68K targets.
</dt><dt><b>--got=</b><i>type</i>
</dt><dd>This option tells the linker which <small>GOT</small> generation scheme to use. <i>type</i> should be one of <b>single</b>, <b>negative</b>, <b>multigot</b>
or <b>target</b>. For more information refer to the Info entry for <i>ld</i>.
</dd></dl>
<h2>Environment</h2>

<p>You can change the behaviour of <b>ld</b> with the environment variables <tt>"GNUTARGET"</tt>, <tt>"LDEMULATION"</tt> and <tt>"COLLECT_NO_DEMANGLE"</tt>.

</p><p><tt>"GNUTARGET"</tt> determines the input-file object format if you don't use <b>-b</b> (or its synonym <b>--format</b>). Its value should be one of the
<small>BFD</small> names for an input format. If there is no <tt>"GNUTARGET"</tt> in the environment, <b>ld</b> uses the natural format of the target. If
<tt>"GNUTARGET"</tt> is set to <tt>"default"</tt> then <small>BFD</small>
 attempts to discover the input format by examining binary input files; 
this method
often succeeds, but there are potential ambiguities, since there is no 
method of ensuring that the magic number used to specify object-file 
formats is unique.
However, the configuration procedure for <small>BFD</small> on each system places the conventional format for that system first in the search-list, so
ambiguities are resolved in favor of convention.
</p><p><tt>"LDEMULATION"</tt> determines the default emulation if you don't use the <b>-m</b> option. The emulation can affect various aspects of linker behaviour,
particularly the default linker script. You can list the available emulations with the <b>--verbose</b> or <b>-V</b> options. If the <b>-m</b> option is not
used, and the <tt>"LDEMULATION"</tt> environment variable is not defined, the default emulation depends upon how the linker was configured.
</p><p>Normally, the linker will default to demangling symbols. However, if <tt>"COLLECT_NO_DEMANGLE"</tt> is set in the environment, then it will default to not
demangling symbols. This environment variable is used in a similar fashion by the <tt>"gcc"</tt> linker wrapper program. The default may be overridden by the
<b>--demangle</b> and <b>--no-demangle</b> options.
</p><h2>See Also</h2>

<p><b><a href="https://linux.die.net/man/1/ar">ar</a></b>(1), <b><a href="https://linux.die.net/man/1/nm">nm</a></b>(1), <b><a href="https://linux.die.net/man/1/objcopy">objcopy</a></b>(1), <b><a href="https://linux.die.net/man/1/objdump">objdump</a></b>(1), <b><a href="https://linux.die.net/man/1/readelf">readelf</a></b>(1) and the Info entries for <i>binutils</i> and <i>ld</i>.
</p><h2>Copyright</h2>

<p>Copyright © 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002, 
2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.

</p><p>Permission is granted to copy, distribute and/or modify this document under the terms of the <small>GNU</small>
 Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no 
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover 
Texts. A copy of the
license is included in the section entitled " <small>GNU</small> Free Documentation License".

<!-- google_ad_section_end -->
</p><h2>Referenced By</h2>
<b><a href="https://linux.die.net/man/1/as" rel="nofollow">as</a></b>(1),
<b><a href="https://linux.die.net/man/1/avr-cpp" rel="nofollow">avr-cpp</a></b>(1),
<b><a href="https://linux.die.net/man/1/avr-gcc" rel="nofollow">avr-gcc</a></b>(1),
<b><a href="https://linux.die.net/man/1/avr-objcopy" rel="nofollow">avr-objcopy</a></b>(1),
<b><a href="https://linux.die.net/man/3/backtrace" rel="nofollow">backtrace</a></b>(3),
<b><a href="https://linux.die.net/man/1/clang" rel="nofollow">clang</a></b>(1),
<b><a href="https://linux.die.net/man/1/cpp" rel="nofollow">cpp</a></b>(1),
<b><a href="https://linux.die.net/man/3/dlopen" rel="nofollow">dlopen</a></b>(3),
<b><a href="https://linux.die.net/man/1/elf" rel="nofollow">elf</a></b>(1),
<b><a href="https://linux.die.net/man/5/elf" rel="nofollow">elf</a></b>(5),
<b><a href="https://linux.die.net/man/1/fp" rel="nofollow">fp</a></b>(1),
<b><a href="https://linux.die.net/man/1/fpc" rel="nofollow">fpc</a></b>(1),
<b><a href="https://linux.die.net/man/1/g77" rel="nofollow">g77</a></b>(1),
<b><a href="https://linux.die.net/man/1/gcc" rel="nofollow">gcc</a></b>(1),
<b><a href="https://linux.die.net/man/1/hcp" rel="nofollow">hcp</a></b>(1),
<b><a href="https://linux.die.net/man/1/hf77" rel="nofollow">hf77</a></b>(1),
<b><a href="https://linux.die.net/man/1/i686-pc-mingw32-as" rel="nofollow">i686-pc-mingw32-as</a></b>(1),
<b><a href="https://linux.die.net/man/1/i686-pc-mingw32-gcc" rel="nofollow">i686-pc-mingw32-gcc</a></b>(1),
<b><a href="https://linux.die.net/man/1/i686-pc-mingw32-gfortran" rel="nofollow">i686-pc-mingw32-gfortran</a></b>(1),
<b><a href="https://linux.die.net/man/1/lazbuild" rel="nofollow">lazbuild</a></b>(1),
<b><a href="https://linux.die.net/man/1/lazres" rel="nofollow">lazres</a></b>(1),
<b><a href="https://linux.die.net/man/8/ld.so" rel="nofollow">ld.so</a></b>(8),
<b><a href="https://linux.die.net/man/1/ldrdf" rel="nofollow">ldrdf</a></b>(1),
<b><a href="https://linux.die.net/man/5/libarchive-formats" rel="nofollow">libarchive-formats</a></b>(5),
<b><a href="https://linux.die.net/man/1/lrstolfm" rel="nofollow">lrstolfm</a></b>(1),
<b><a href="https://linux.die.net/man/1/mpic++" rel="nofollow">mpic++</a></b>(1),
<b><a href="https://linux.die.net/man/1/mpicxx" rel="nofollow">mpicxx</a></b>(1),
<b><a href="https://linux.die.net/man/1/pcc" rel="nofollow">pcc</a></b>(1),
<b><a href="https://linux.die.net/man/1/svn2revisioninc" rel="nofollow">svn2revisioninc</a></b>(1),
<b><a href="https://linux.die.net/man/1/updatepofiles" rel="nofollow">updatepofiles</a></b>(1),
<b><a href="https://linux.die.net/man/2/uselib" rel="nofollow">uselib</a></b>(2),
<b><a href="https://linux.die.net/man/1/xtensa-linux-gnu-as" rel="nofollow">xtensa-linux-gnu-as</a></b>(1),
<b><a href="https://linux.die.net/man/1/xtensa-linux-gnu-cpp" rel="nofollow">xtensa-linux-gnu-cpp</a></b>(1),
<b><a href="https://linux.die.net/man/1/xtensa-linux-gnu-gcc" rel="nofollow">xtensa-linux-gnu-gcc</a></b>(1),
<b><a href="https://linux.die.net/man/1/xtensa-linux-gnu-objcopy" rel="nofollow">xtensa-linux-gnu-objcopy</a></b>(1),
<b><a href="https://linux.die.net/man/1/yasm" rel="nofollow">yasm</a></b>(1)
<div id="adbottom">
<script async="" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/f_005.txt"></script>
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-5823754184406795" data-ad-slot="8789940313" data-adsbygoogle-status="done" data-ad-status="filled"><ins id="aswift_1_expand" style="border: medium none; height: 280px; width: 336px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-table;" tabindex="0" title="Advertisement" aria-label="Advertisement"><ins id="aswift_1_anchor" style="border: medium none; height: 280px; width: 336px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: block;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:336px;height:280px;" sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/ads.htm" data-google-container-id="a!2" data-google-query-id="CL35trWz-PgCFQ7l7Qod4FgKJQ" data-load-complete="true" width="336" height="280" frameborder="0"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

</div>
<div id="menu">
<dl>
<dt>Site Search</dt>
<dd>
<form id="cse-search-box-menu" action="https://www.die.net/search/">
<input name="q" type="text" size="10">
<input type="hidden" name="sa" value="Search">
<input type="hidden" name="ie" value="ISO-8859-1">
<input type="hidden" name="cx" value="partner-pub-5823754184406795:54htp1rtx5u">
<input type="hidden" name="cof" value="FORID:9">
</form>
<script type="text/javascript">
<!--
document.forms["cse-search-box-menu"].action = "https://www.die.net/search/";
// -->
</script>
</dd></dl>



<dl>
<dt>Library</dt>
<dd><a href="https://linux.die.net/">linux docs</a></dd>
<dd><a href="https://linux.die.net/man/">linux man pages</a></dd>
<dd><a href="https://www.die.net/musings/page_load_time/">page load time</a></dd>
</dl>
<dl>
<dt>Toys</dt>
<dd><a href="https://www.die.net/earth/">world sunlight</a></dd>
<dd><a href="https://www.die.net/moon/">moon phase</a></dd>
<dd><a href="http://trace.die.net/">trace explorer</a></dd>
</dl>


<dl>
<dt><a href="https://linux.die.net/man/1/"><img src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/back.gif" alt="Back" width="20" height="22"></a></dt><dd></dd>
</dl>
</div></div>
<script type="text/javascript">
<!--
if (top.location != self.location) top.location = self.location;
if (/[?&][pq]=/.test(document.referrer)) document.write(unescape("%3Cscript src='/style/highlight.js' type='text/javascript'%3E%3C/script%3E"));
function googleTranslateElementInit() {new google.translate.TranslateElement({pageLanguage: 'en', floatPosition: google.translate.TranslateElement.FloatPosition.TOP_RIGHT, gaTrack: true, gaId: 'UA-50820-6'});}
if (!/^en/i.test(window.navigator.userLanguage||window.navigator.language)) document.write(unescape("%3Cscript src='//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit' type='text/javascript'%3E%3C/script%3E"));
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
// -->
</script><script src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/element" type="text/javascript"></script>
<script>(function(){var js = "window['__CF$cv$params']={r:'72aa49d7ee0f73c3',m:'ZGZR8tIngfqwDr_heNEilh.Io9eVj.WdXO9kN.KQ3I8-1657802023-0-AY37iPUqtNB0y3gYWXscKdIFmpW8r+5W7Ez+8TY0y2T+lU48ukh97LjR4HNbRKFAqpgNCtNcYtxNeHkPE/UZW05dhQiYdXCkYlYQ2btMqqse6pFGyM4edulxvbB1DXeGrw==',s:[0x91fcf3fa63,0xa048b2414e],u:'/cdn-cgi/challenge-platform/h/g'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/g/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script><iframe style="border: medium none; visibility: hidden;" width="1" height="1"></iframe>

<div id="goog-gt-tt" class="skiptranslate" dir="rtl"><div style="padding: 8px;"><div><div class="logo"><img src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/translate_24dp.png" alt="Google &#1578;&#1585;&#1580;&#1605;&#1577;" width="20" height="20"></div></div></div><div class="top" style="padding: 8px; float: left; width: 100%;"><h1 class="title gray">&#1575;&#1604;&#1606;&#1589; &#1575;&#1604;&#1571;&#1589;&#1604;&#1610;</h1></div><div class="middle" style="padding: 8px;"><div class="original-text"></div></div><div class="bottom" style="padding: 8px;"><div class="activity-links"><span class="activity-link">&#1575;&#1604;&#1605;&#1587;&#1575;&#1607;&#1605;&#1577; &#1576;&#1578;&#1585;&#1580;&#1605;&#1577; &#1571;&#1601;&#1590;&#1604;</span><span class="activity-link"></span></div><div class="started-activity-container"><hr style="color: #CCC; background-color: #CCC; height: 1px; border: none;"><div class="activity-root"></div></div></div><div class="status-message" style="display: none;"></div></div><ins class="adsbygoogle adsbygoogle-noablate" style="display: none !important;" data-adsbygoogle-status="done" data-ad-status="unfilled"><ins id="aswift_2_expand" style="border: medium none; height: 0px; width: 0px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-table;" tabindex="0" title="Advertisement" aria-label="Advertisement"><ins id="aswift_2_anchor" style="border: medium none; height: 0px; width: 0px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: block;"><iframe id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;border:0;width:undefinedpx;height:undefinedpx;" sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/ads_003.htm" data-google-container-id="a!3" data-load-complete="true" frameborder="0"></iframe></ins></ins></ins><div class="goog-te-spinner-pos"><div class="goog-te-spinner-animation"><svg xmlns="http://www.w3.org/2000/svg" class="goog-te-spinner" width="96px" height="96px" viewBox="0 0 66 66"><circle class="goog-te-spinner-path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle></svg></div></div><div style="display: none; box-sizing: content-box; width: 60px; height: 24px;" id=":0.floatContainer" class=" goog-te-ftab-float"><iframe id=":0.container" src="javascript:''" class="goog-te-ftab-frame skiptranslate" style="visibility: visible; box-sizing: content-box; width: 60px; height: 24px;" frameborder="0"></iframe></div><iframe class="goog-te-menu-frame skiptranslate" title="&#1571;&#1583;&#1575;&#1577; &#1578;&#1585;&#1580;&#1605;&#1577; &#1575;&#1604;&#1604;&#1594;&#1577;" style="visibility: visible; box-sizing: content-box; width: 888px; height: 274px; display: none;" frameborder="0"></iframe><iframe class="goog-te-menu-frame skiptranslate" title="&#1571;&#1583;&#1575;&#1577; &#1578;&#1585;&#1580;&#1605;&#1577; &#1575;&#1604;&#1604;&#1594;&#1577;" style="visibility: visible; box-sizing: content-box; width: 125px; height: 71px; display: none;" frameborder="0"></iframe><iframe src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/aframe.htm" style="display: none;" width="0" height="0"></iframe></body><iframe id="google_esf" name="google_esf" src="ld(1)%20GNU%20linker%20-%20Linux%20man%20page_files/zrt_lookup.htm" style="display: none;"></iframe></html>